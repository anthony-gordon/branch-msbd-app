{
  "version": 3,
  "sources": ["../app/db.server.js", "<stdin>", "../app/entry.server.jsx", "../app/shopify.server.js", "../app/root.jsx", "../app/MyContext.jsx", "../app/models/variantShipDateData.server.js", "../app/routes/app.product.$id.variants.$variantId.jsx", "../app/utils/dataFormattingFunctions.js", "../app/routes/app.products.$id.jsx", "../app/routes/qrcodes.$id.scan.jsx", "../app/models/QRCode.server.js", "../app/routes/app.qrcodes.$id.jsx", "../app/routes/app.settings.jsx", "../app/utils/updateFunctions.jsx", "../app/routes/app.updates.jsx", "../app/routes/qrcodes.$id.jsx", "../app/routes/app._index.jsx", "../app/utils/msbdFunctions.js", "../app/utils/productFetchHelpers.js", "../app/components/ProductsView.jsx", "../app/routes/auth.login/route.jsx", "../app/routes/auth.login/error.server.jsx", "../app/routes/webhooks.jsx", "../app/routes/_index/route.jsx", "../app/routes/auth.$.jsx", "../app/routes/app.jsx", "server-assets-manifest:@remix-run/dev/assets-manifest", "server-entry-module:@remix-run/dev/server-build"],
  "sourcesContent": ["// import { PrismaClient } from \"@prisma/client\";\nconst { PrismaClient } = require(\"@prisma/client\")\n\nconst prisma = global.prisma || new PrismaClient();\n\nif (process.env.NODE_ENV !== \"production\") {\n  if (!global.prisma) {\n    global.prisma = new PrismaClient();\n  }\n}\n\nmodule.exports = prisma\n", "export * from \"@remix-run/dev/server-build\";", "import { PassThrough } from \"stream\";\nimport { renderToPipeableStream } from \"react-dom/server\";\nimport { RemixServer } from \"@remix-run/react\";\nimport { createReadableStreamFromReadable } from \"@remix-run/node\";\nimport isbot from \"isbot\";\nimport { addDocumentResponseHeaders } from \"./shopify.server\";\n\n\nconst ABORT_DELAY = 5000;\n\nexport default async function handleRequest(\n  request,\n  responseStatusCode,\n  responseHeaders,\n  remixContext\n) {\n  addDocumentResponseHeaders(request, responseHeaders);\n  const callbackName = isbot(request.headers.get(\"user-agent\"))\n    ? \"onAllReady\"\n    : \"onShellReady\";\n\n  return new Promise((resolve, reject) => {\n    const { pipe, abort } = renderToPipeableStream(\n        <RemixServer\n          context={remixContext}\n          url={request.url}\n          abortDelay={ABORT_DELAY}\n        />\n      ,\n      {\n        [callbackName]: () => {\n          const body = new PassThrough();\n          const stream = createReadableStreamFromReadable(body);\n\n          responseHeaders.set(\"Content-Type\", \"text/html\");\n          resolve(\n            new Response(stream, {\n              headers: responseHeaders,\n              status: responseStatusCode,\n            })\n          );\n          pipe(body);\n        },\n        onShellError(error) {\n          reject(error);\n        },\n        onError(error) {\n          responseStatusCode = 500;\n          console.error(error);\n        },\n      }\n    );\n\n    setTimeout(abort, ABORT_DELAY);\n  });\n}\n", "import \"@shopify/shopify-app-remix/adapters/node\";\nimport {\n  AppDistribution,\n  DeliveryMethod,\n  shopifyApp,\n  LATEST_API_VERSION,\n} from \"@shopify/shopify-app-remix/server\";\nimport { PrismaSessionStorage } from \"@shopify/shopify-app-session-storage-prisma\";\nimport { restResources } from \"@shopify/shopify-api/rest/admin/2023-10\";\n// import prisma from \"./db.server\";\nconst prisma  = require('./db.server.js')\n\n\nconst shopify = shopifyApp({\n  apiKey: process.env.SHOPIFY_API_KEY,\n  apiSecretKey: process.env.SHOPIFY_API_SECRET || \"\",\n  apiVersion: LATEST_API_VERSION,\n  scopes: process.env.SCOPES?.split(\",\"),\n  appUrl: process.env.SHOPIFY_APP_URL || \"\",\n  authPathPrefix: \"/auth\",\n  sessionStorage: new PrismaSessionStorage(prisma),\n  distribution: AppDistribution.AppStore,\n  restResources,\n  webhooks: {\n    APP_UNINSTALLED: {\n      deliveryMethod: DeliveryMethod.Http,\n      callbackUrl: \"/webhooks\",\n    },\n  },\n  hooks: {\n    afterAuth: async ({ session }) => {\n      shopify.registerWebhooks({ session });\n    },\n  },\n  future: {\n    v3_webhookAdminContext: true,\n    v3_authenticatePublic: true,\n  },\n  ...(process.env.SHOP_CUSTOM_DOMAIN\n    ? { customShopDomains: [process.env.SHOP_CUSTOM_DOMAIN] }\n    : {}),\n});\n\nexport default shopify;\nexport const apiVersion = LATEST_API_VERSION;\nexport const addDocumentResponseHeaders = shopify.addDocumentResponseHeaders;\nexport const authenticate = shopify.authenticate;\nexport const unauthenticated = shopify.unauthenticated;\nexport const login = shopify.login;\nexport const registerWebhooks = shopify.registerWebhooks;\nexport const sessionStorage = shopify.sessionStorage;\n", "import {\n  Links,\n  LiveReload,\n  Meta,\n  Outlet,\n  Scripts,\n  ScrollRestoration,\n  useLoaderData\n} from \"@remix-run/react\";\nimport { MyContextProvider } from './MyContext';\nimport { json } from \"@remix-run/node\";\nimport { fetchDBShipDateData, fetchSettings } from \"./models/variantShipDateData.server\";\nimport { MyContext } from './MyContext';\nimport { useContext, useEffect } from \"react\"\n\n\nexport default function App() {\n\n  \n\n  return (\n    <MyContextProvider>\n      <html>\n        <head>\n          <meta charSet=\"utf-8\" />\n          <meta name=\"viewport\" content=\"width=device-width,initial-scale=1\" />\n          <Meta />\n          <Links />\n        </head>\n        <body>\n          <Outlet />\n          <ScrollRestoration />\n          <LiveReload />\n          <Scripts />\n        </body>\n      </html>\n    </MyContextProvider>\n  );\n}\n", "import React, { createContext, useState, useEffect } from 'react';\n\nconst MyContext = createContext();\n\nconst MyContextProvider = ({ children }) => {\n \n  const [sharedState, setSharedState] = useState('Initial value');\n  const [buffer, setBuffer] = useState(5);\n  const [defaultProcessingTime, setDefaultProcessingTime] = useState(1);\n  const [dtcDefaultShippingRange, setDtcDefaultShippingRange] = useState(1);\n  const [b2bDefaultShippingRange, setB2bDefaultShippingRange] = useState(1);\n  const [dtcDateAvailableMessage, setDtcDateAvailableMessage] = useState('Ships for free #date_available_description#');\n  const [dtcProcessingTimeMessage, setDtcProcessingTimeMessage] = useState('Ships for free #processing_time_description#');\n  const [b2bDateAvailableMessage, setB2bDateAvailableMessage] = useState('Ships with white glove installation #date_available_description#');\n  const [b2bProcessingTimeMessage, setB2bProcessingTimeMessage] = useState('Ships with white glove installation #processing_time_description#');\n  const [allProducts, setAllProducts] = useState({});\n  const [settings, setSettings] = useState({});\n  const [dbProducts, setDbProducts] = useState({});\n  const [dbProductsFormatted, setDbProductsFormatted] = useState({});\n  const [updating, setUpdating] = useState(false)\n  const [amountToUpdate, setAmountToUpdate] = useState(0)\n  const [amountLeftToUpdate, setAmountLeftToUpdate] = useState(0);\n  const [percentageUpdated, setPercentageUpdated] = useState(100);\n\n\n\n  return (\n    <MyContext.Provider value={{\n        sharedState, setSharedState, \n        buffer, setBuffer, \n        defaultProcessingTime, setDefaultProcessingTime, \n        dtcDefaultShippingRange, setDtcDefaultShippingRange, \n        b2bDefaultShippingRange, setB2bDefaultShippingRange, \n        dtcDateAvailableMessage, setDtcDateAvailableMessage, \n        dtcProcessingTimeMessage, setDtcProcessingTimeMessage, \n        b2bDateAvailableMessage, setB2bDateAvailableMessage, \n        b2bProcessingTimeMessage, setB2bProcessingTimeMessage,\n        allProducts, setAllProducts ,\n        settings, setSettings,\n        dbProducts, setDbProducts,\n        dbProductsFormatted, setDbProductsFormatted,\n        updating, setUpdating,\n        amountToUpdate, setAmountToUpdate,\n        amountLeftToUpdate, setAmountLeftToUpdate,\n        percentageUpdated, setPercentageUpdated\n      }}>\n      {children}\n    </MyContext.Provider>\n  );\n};\n\nexport { MyContext, MyContextProvider };\n", "import db from \"../db.server\";\n\nexport async function fetchDBShipDateData() {\n    const dbShipDateData = await db.variantShipDateData.findMany();\n    return dbShipDateData\n}\n\nexport async function fetchSettings() {\n    const settings = await db.settings.findMany();\n    return settings\n}\n\nexport async function fetchUpdates() {\n    const updates = await db.updates.findMany();\n    return updates\n}\n", "import { useParams } from \"@remix-run/react\";\nimport { useContext, useState, useEffect } from 'react'\nimport { MyContext } from '../MyContext';\nimport { formatDbProducts } from \"../utils/dataFormattingFunctions\"\nimport {Page, Card, DataTable} from '@shopify/polaris';\nimport { Link } from \"@remix-run/react\";\n\n\nexport default function VariantPage(){\n    const { dbProducts, setDbProducts } = useContext(MyContext);\n    const params = useParams();\n\n\n    const [rows, setRows] = useState([]);\n    const [currentProduct, setCurrentProduct] = useState([])\n    const [currentVariant, setCurrentVariant] = useState([])\n\n    useEffect(() => {\n        console.log('currentProduct', currentProduct, 'currentVariant', currentVariant)\n        if(currentProduct && currentProduct.length == 0 && dbProducts && dbProducts.length > 0){\n            setCurrentProduct(formatDbProducts(dbProducts)[`gid://shopify/Product/${params.id}`]);\n            setCurrentVariant(formatDbProducts(dbProducts)[`gid://shopify/Product/${params.id}`][`gid://shopify/ProductVariant/${params.variantId}`])\n        }\n        let updateRows = []\n        if(currentProduct && Object.keys(currentProduct).length > 0 && currentVariant && Object.keys(currentVariant).length > 0){\n            let updatedRecordArray = currentVariant.updatedRecord.split('},{')\n            console.log('here', currentVariant.id, 'updatedRecordArry', updatedRecordArray);\n            let updateRows = []\n\n            updatedRecordArray.forEach((updatedRecordRow) => {\n                let row = []\n                let dateString = Date.parse(updatedRecordRow.split(': ').shift().replaceAll(',', '').replaceAll('}', '').replaceAll('{', ''));\n                let messageString = updatedRecordRow.split(': ').pop().replaceAll(',', '').replaceAll('}', '').replaceAll('{', '')\n                let date =  new Date(dateString)\n                console.log('dateString', dateString, messageString)\n                row.push(`${date.toLocaleString('en-US', {\n                    timeZone: 'America/New_York',\n                  })} - EST`);\n                row.push(messageString)\n                updateRows.push(row) \n\n            })\n            console.log('updateRows', updateRows)\n            setRows(updateRows);\n\n            // Object.entries(currentVariant).forEach(([key, value]) => {\n            //     let row = [];\n            //     row.push(value.title.split(' - ').pop());\n            //     row.push(value.productVariantId.split('ProductVariant/').pop());\n                \n            //     updateRows.push(row) \n            //   });\n              \n            \n        }\n      \n      }, [dbProducts, currentProduct, currentVariant]);\n\n    \n\n    return (\n        <Page title={`Variant change log: ${Object.keys(currentVariant).length > 0 && currentVariant.productVariantId.split('/ProductVariant/').pop()} (${Object.keys(currentVariant).length > 0 && currentVariant.title})`}>\n            {Object.keys(currentVariant).length > 0 && <Link to={`/app/products/${params.id}`} >Back to: {currentVariant.title.split(' - ').shift()}</Link>}\n            <Card>\n                <DataTable\n                columnContentTypes={[\n                    'date',\n                    'text'\n                ]}\n                headings={[\n                    'Date/time changed',\n                    'Message'\n                ]}\n                rows={rows}\n                />\n            </Card>\n            </Page>\n        )\n}\n", "export function returnDBShipDateStrings(dbData){\n    let dbShipDateStrings = {};\n\n    dbData.forEach((dbDataRow) => {\n        dbShipDateStrings[`${dbDataRow.productVariantId}`] = dbDataRow.shipDateMessage;\n    })\n\n    return dbShipDateStrings\n  }\n\n  function updateBundleProductValues(bundleProductsArray, dataBaseObjectAllProducts){\n    bundleProductsArray.forEach((bundleProductVariantId) => {\n\n        let currentDate = new Date();\n        let currentDateString = currentDate.toLocaleDateString(\"en-US\").split('/').reverse().join('-');\n\n        let furthestData = {\n            processingTime: 0,\n            dateAvailable: `${currentDateString}`\n        }\n\n        let processingTimeArray = [];\n        let dateAvailableArray = [];\n\n        let bundleProductData = JSON.parse(dataBaseObjectAllProducts[`${bundleProductVariantId}`]);\n        let bundleProductConstituentsData = JSON.parse(JSON.parse(bundleProductData.bundleProducts));\n\n        bundleProductConstituentsData.forEach((bundleProductConstituentData) => {\n            let constituentProcessingTime = JSON.parse(dataBaseObjectAllProducts[`gid://shopify/ProductVariant/${bundleProductConstituentData.variantId}`]).processingTime;\n            let constituentDateAvailable = JSON.parse(dataBaseObjectAllProducts[`gid://shopify/ProductVariant/${bundleProductConstituentData.variantId}`]).dateAvailable;\n\n            processingTimeArray.push(constituentProcessingTime);\n            dateAvailableArray.push(constituentDateAvailable);\n        })\n\n        let sortedProcessingTimeArray = [...processingTimeArray].sort(function(a, b) {\n            return a - b;\n          }).reverse();\n\n        let sortedDateAvailableArray = [...dateAvailableArray].sort(function(a, b) {\n            return new Date(a) - new Date(b);\n          }).reverse();\n\n        furthestData.processingTime = sortedProcessingTimeArray[0];\n        furthestData.dateAvailable = sortedDateAvailableArray[0];\n\n        let bundleProductVariantRowData = JSON.parse(dataBaseObjectAllProducts[`${bundleProductVariantId}`]);\n        \n        bundleProductVariantRowData.processingTime = furthestData.processingTime;\n        bundleProductVariantRowData.dateAvailable = furthestData.dateAvailable;\n\n        dataBaseObjectAllProducts[`${bundleProductVariantId}`] = JSON.stringify(bundleProductVariantRowData);\n\n    })\n  }\n\n  export function formatCurrentProductData(currentProductData, settings){\n    let defaultProcessingTime = parseInt(settings.defaultProcessingTime)\n    let currentDate = new Date();\n    let currentDateString = currentDate.toLocaleDateString(\"en-US\").split('/').reverse().join('-');\n\n    \n            let dataBaseObjectAllProducts = {};\n            let bundleProductsArray = [];\n            for (const [key, arrayRow] of Object.entries(currentProductData)) {\n                for (const [key, variant] of Object.entries(arrayRow.variants)) {\n                        let tags = arrayRow.tags.map(v => v.toLowerCase())\n                        let dataBaseUpdateObject = {\n                            productId: arrayRow.id,\n                            productVariantId: variant.id,\n                            title: `${arrayRow.title} - ${variant.title}`,\n                            shop: 'anthony-branch-dev-store-2022',\n                            productHandle: arrayRow.handle,\n                            shipDateMessage: '',\n                            b2bProduct: tags.includes('b2b') ? true : false,\n                            bundleProduct: tags.includes('bundle') ? true : false,\n                        };\n    \n                        dataBaseUpdateObject['processingTime'] = variant[\"processing_time\"] ? variant[\"processing_time\"] : `${defaultProcessingTime}`;\n                        dataBaseUpdateObject['dateAvailable'] = variant[\"date_available\"] ? variant[\"date_available\"] : `${currentDateString}`;\n                        dataBaseUpdateObject['overrideMessage'] = variant[\"shipping\"] ? variant[\"shipping\"] : '';\n                        dataBaseUpdateObject['bundleProducts'] = variant[\"bundle_products\"] ? variant[\"bundle_products\"] : '';\n                        dataBaseUpdateObject['shipDateMessage'] = variant[\"ship_date_string\"] ? variant[\"ship_date_string\"] : '';\n                        dataBaseUpdateObject['shipDateMessageId'] = variant[\"ship_date_string_id\"] ? variant[\"ship_date_string_id\"] : '';\n\n\n                        dataBaseObjectAllProducts[`${variant.id}`] = JSON.stringify(dataBaseUpdateObject);\n                    \n                }\n            }\n\n            if(bundleProductsArray.length > 0){\n                updateBundleProductValues(bundleProductsArray, dataBaseObjectAllProducts);\n            }\n    return dataBaseObjectAllProducts;\n  }\n\n  export function returnVariantsToUpdateShipDateStrings(dbShipDateStrings, currentShipDateStrings){\n    let variantsToUpdateShipDateStrings = {};\n    for (const [key, value] of Object.entries(currentShipDateStrings)) {\n        let update = true;\n        for (const [dbVariantId, dbShippingMessage] of Object.entries(dbShipDateStrings)) {\n            if(key === dbVariantId) {\n                if(value === dbShippingMessage){\n                    update = false;\n                }\n            }\n        }   \n        if(update == true){\n            let updateObject = {};\n            updateObject[`${key}`] = value;\n            variantsToUpdateShipDateStrings[`${key}`] = JSON.stringify(updateObject);\n        }\n      }\n\n    \n    return variantsToUpdateShipDateStrings\n  }\n\n  function findParentProductId(variantId, formattedProducts){\n    let id;\n\n    for (const [key, value] of Object.entries(formattedProducts)) {\n        if(value.variants && value.variants[`${variantId}`]) {\n            id = value.id;\n            break;\n        }\n    }\n\n    return id\n  }\n\n  export function formatBulkDataOperationJSON(productsObject){\n    let formattedProducts = {};\n\n    for (const [key, value] of Object.entries(productsObject)) {\n        if(!value[`__parentId`]){ \n                 formattedProducts[`${value.id}`] = value;\n                 formattedProducts[`${value.id}`]['variants'] = {};\n            } else if(value[`__parentId`] && value[`__parentId`].includes('/Product/')){\n                formattedProducts[`${value[`__parentId`]}`]['variants'][`${value['id']}`] = value\n            } else if(value[`__parentId`] && value[`__parentId`].includes('/ProductVariant/')) {\n                let parentProductId = findParentProductId(value[`__parentId`], formattedProducts);\n                formattedProducts[`${parentProductId}`]['variants'][`${value[\"__parentId\"]}`][`${value[\"key\"]}`] = value['value'];\n                formattedProducts[`${parentProductId}`]['variants'][`${value[\"__parentId\"]}`][`${value[\"key\"]}_id`] = value['id'];\n            }\n          }\n\n    return formattedProducts\n  }\n\n  export function formatDbProducts(dbProducts){\n    let formattedDbProducts = {};\n\n    for (const [key, value] of Object.entries(dbProducts)) {\n        if(!formattedDbProducts[`${value.productId}`]){ \n          formattedDbProducts[`${value.productId}`] = {};\n          formattedDbProducts[`${value.productId}`][`${value.productVariantId}`] = value;\n            } else {\n              formattedDbProducts[`${value.productId}`][`${value.productVariantId}`] = value;\n            }\n           }\n\n    return formattedDbProducts\n  }\n\nexport function returnMetafieldIds(currentData){\n  let metafieldIds = {};\n\n  for (const [key, value] of Object.entries(currentData)) {\n    metafieldIds[`${key}`] = JSON.parse(value)['shipDateMessageId'];\n  }\n\n\n  return metafieldIds\n}\n\nexport function returnCurrentProductsArrayDifferences(currentProductsArray, dbShipDateData){\n  let currentProductsArrayDifferences = [];\n\n  currentProductsArray.forEach((currentProduct) => {\n    let update = true;\n    let currentProductToBeUpdated = currentProduct;\n    let currentProductShippingString = currentProduct.shipDateMessage;\n    let currentProductVariantId = currentProduct.productVariantId;\n\n    let dbProduct = dbShipDateData.find(x => x.productVariantId === `${currentProductVariantId}`);\n    if(dbProduct){\n      let dbProductShippingString = dbProduct.shipDateMessage;\n      let dbProductUpdatedRecord = dbProduct.updatedRecord;\n      let currentTime = new Date();\n      \n      let dbProductUpdatedRecordArray = dbProductUpdatedRecord.replace(\"[\", \"\").replace(\"[\", \"\").split(',');\n      dbProductUpdatedRecordArray.unshift(`{${currentTime}: ${currentProductShippingString}}`);\n      let dbProductUpdatedRecordArrayMostRecent = dbProductUpdatedRecordArray.slice(0, 5);\n      currentProductToBeUpdated[`updatedRecord`] = dbProductUpdatedRecordArrayMostRecent.toString();\n      if(currentProductShippingString == dbProductShippingString){\n        update = false;\n      }\n    }\n\n    if(update == true){\n      currentProductsArrayDifferences.push(currentProductToBeUpdated);\n    }\n\n  })\n\n  return currentProductsArrayDifferences;\n}\n", "import { useParams } from \"@remix-run/react\";\nimport { useContext, useState, useEffect } from 'react'\nimport { MyContext } from '../MyContext';\nimport { formatDbProducts } from \"../utils/dataFormattingFunctions\"\nimport {Page, Card, DataTable} from '@shopify/polaris';\nimport { Link } from \"@remix-run/react\";\n\n\nexport default function ProductPage(){\n    const { dbProducts, setDbProducts } = useContext(MyContext);\n    const params = useParams();\n\n\n    const [rows, setRows] = useState([]);\n    const [currentProduct, setCurrentProduct] = useState([])\n\n    console.log('currentProduct', currentProduct, formatDbProducts(dbProducts));\n\n\n    useEffect(() => {\n        if(currentProduct && currentProduct.length == 0 && dbProducts && dbProducts.length > 0){\n            setCurrentProduct(formatDbProducts(dbProducts)[`gid://shopify/Product/${params.id}`]);\n        }\n        let updateRows = []\n        if(currentProduct && Object.keys(currentProduct).length > 0){\n            console.log('here', currentProduct)\n            Object.entries(currentProduct).forEach(([key, value]) => {\n                let row = [];\n                row.push(value.title.split(' - ').pop());\n                row.push(value.productVariantId.split('ProductVariant/').pop());\n                row.push(value.dateAvailable);\n                row.push(value.processingTime);\n                row.push(value.shipDateMessage);\n                row.push(<Link to={`/app/product/${params.id}/variants/${value.productVariantId.split('ProductVariant/').pop()}`} >See change log</Link>);\n        \n                updateRows.push(row) \n              });\n              \n            \n        }\n      \n        setRows(updateRows);\n      }, [dbProducts, currentProduct]);\n\n    \n\n    return (\n        <Page title=\"Ship date message by variant\">\n            <Link to={`/app`} >Back to product list</Link>\n            <Card>\n                <DataTable\n                columnContentTypes={[\n                    'text',\n                    'text',\n                    'date',\n                    'numeric',\n                    'text',\n                    'text'\n                ]}\n                headings={[\n                    'Variant title',\n                    'Variant ID',\n                    'Date available',\n                    'Processing time',\n                    'Ship date message',\n                    'Ship date message record'\n                ]}\n                rows={rows}\n                />\n            </Card>\n            </Page>\n        )\n}\n", "import { redirect } from \"@remix-run/node\";\nimport invariant from \"tiny-invariant\";\nimport db from \"../db.server\";\n\nimport { getDestinationUrl } from \"../models/QRCode.server\";\n\nexport const loader = async ({ params }) => {\n  invariant(params.id, \"Could not find QR code destination\");\n\n  const id = Number(params.id);\n  const qrCode = await db.qRCode.findFirst({ where: { id } });\n\n  invariant(qrCode, \"Could not find QR code destination\");\n\n  await db.qRCode.update({\n    where: { id },\n    data: { scans: { increment: 1 } },\n  });\n\n  return redirect(getDestinationUrl(qrCode));\n};\n", "import qrcode from \"qrcode\";\nimport invariant from \"tiny-invariant\";\nimport db from \"../db.server\";\n\nexport async function getQRCode(id, graphql) {\n  const qrCode = await db.qRCode.findFirst({ where: { id } });\n\n  if (!qrCode) {\n    return null;\n  }\n\n  return supplementQRCode(qrCode, graphql);\n}\n\nexport async function getQRCodes(shop, graphql) {\n  const qrCodes = await db.qRCode.findMany({\n    where: { shop },\n    orderBy: { id: \"desc\" },\n  });\n\n  if (qrCodes.length === 0) return [];\n\n  return Promise.all(\n    qrCodes.map((qrCode) => supplementQRCode(qrCode, graphql))\n  );\n}\n\nexport function getQRCodeImage(id) {\n  const url = new URL(`/qrcodes/${id}/scan`, process.env.SHOPIFY_APP_URL);\n  return qrcode.toDataURL(url.href);\n}\n\nexport function getDestinationUrl(qrCode) {\n  if (qrCode.destination === \"product\") {\n    return `https://${qrCode.shop}/products/${qrCode.productHandle}`;\n  }\n\n  const match = /gid:\\/\\/shopify\\/ProductVariant\\/([0-9]+)/.exec(qrCode.productVariantId);\n  invariant(match, \"Unrecognized product variant ID\");\n\n  return `https://${qrCode.shop}/cart/${match[1]}:1`;\n}\n\nasync function supplementQRCode(qrCode, graphql) {\n  const qrCodeImagePromise = getQRCodeImage(qrCode.id);\n\n  const response = await graphql(\n    `\n      query supplementQRCode($id: ID!) {\n        product(id: $id) {\n          title\n          images(first: 1) {\n            nodes {\n              altText\n              url\n            }\n          }\n        }\n      }\n    `,\n    {\n      variables: {\n        id: qrCode.productId,\n      },\n    }\n  );\n\n  const {\n    data: { product },\n  } = await response.json();\n\n  return {\n    ...qrCode,\n    productDeleted: !product?.title,\n    productTitle: product?.title,\n    productImage: product?.images?.nodes[0]?.url,\n    productAlt: product?.images?.nodes[0]?.altText,\n    destinationUrl: getDestinationUrl(qrCode),\n    image: await qrCodeImagePromise,\n  };\n}\n\nexport function validateQRCode(data) {\n  const errors = {};\n\n  if (!data.title) {\n    errors.title = \"Title is required\";\n  }\n\n  if (!data.productId) {\n    errors.productId = \"Product is required\";\n  }\n\n  if (!data.destination) {\n    errors.destination = \"Destination is required\";\n  }\n\n  if (Object.keys(errors).length) {\n    return errors;\n  }\n}\n", "import { useState } from \"react\";\nimport { json, redirect } from \"@remix-run/node\";\nimport {\n  useActionData,\n  useLoaderData,\n  useNavigation,\n  useSubmit,\n  useNavigate,\n} from \"@remix-run/react\";\nimport { authenticate } from \"../shopify.server\";\nimport {\n  Card,\n  Bleed,\n  Button,\n  ChoiceList,\n  Divider,\n  EmptyState,\n  InlineStack,\n  InlineError,\n  Layout,\n  Page,\n  Text,\n  TextField,\n  Thumbnail,\n  BlockStack,\n  PageActions,\n} from \"@shopify/polaris\";\nimport { ImageMajor } from \"@shopify/polaris-icons\";\n\nimport db from \"../db.server\";\nimport { getQRCode, validateQRCode } from \"../models/QRCode.server\";\n\nexport async function loader({ request, params }) {\n  const { admin } = await authenticate.admin(request);\n\n  if (params.id === \"new\") {\n    return json({\n      destination: \"product\",\n      title: \"\",\n    });\n  }\n\n  return json(await getQRCode(Number(params.id), admin.graphql));\n}\n\nexport async function action({ request, params }) {\n  const { session } = await authenticate.admin(request);\n  const { shop } = session;\n\n  /** @type {any} */\n  const data = {\n    ...Object.fromEntries(await request.formData()),\n    shop,\n  };\n\n  if (data.action === \"delete\") {\n    await db.qRCode.delete({ where: { id: Number(params.id) } });\n    return redirect(\"/app\");\n  }\n\n  const errors = validateQRCode(data);\n\n  if (errors) {\n    return json({ errors }, { status: 422 });\n  }\n\n  const qrCode =\n    params.id === \"new\"\n      ? await db.qRCode.create({ data })\n      : await db.qRCode.update({ where: { id: Number(params.id) }, data });\n\n  return redirect(`/app/qrcodes/${qrCode.id}`);\n}\n\nexport default function QRCodeForm() {\n  const errors = useActionData()?.errors || {};\n\n  const qrCode = useLoaderData();\n  const [formState, setFormState] = useState(qrCode);\n  const [cleanFormState, setCleanFormState] = useState(qrCode);\n  const isDirty = JSON.stringify(formState) !== JSON.stringify(cleanFormState);\n\n  const nav = useNavigation();\n  const isSaving =\n    nav.state === \"submitting\" && nav.formData?.get(\"action\") !== \"delete\";\n  const isDeleting =\n    nav.state === \"submitting\" && nav.formData?.get(\"action\") === \"delete\";\n\n  const navigate = useNavigate();\n\n  async function selectProduct() {\n    const products = await window.shopify.resourcePicker({\n      type: \"product\",\n      action: \"select\", // customized action verb, either 'select' or 'add',\n    });\n\n    if (products) {\n      const { images, id, variants, title, handle } = products[0];\n\n      setFormState({\n        ...formState,\n        productId: id,\n        productVariantId: variants[0].id,\n        productTitle: title,\n        productHandle: handle,\n        productAlt: images[0]?.altText,\n        productImage: images[0]?.originalSrc,\n      });\n    }\n  }\n\n  const submit = useSubmit();\n  function handleSave() {\n    const data = {\n      title: formState.title,\n      productId: formState.productId || \"\",\n      productVariantId: formState.productVariantId || \"\",\n      productHandle: formState.productHandle || \"\",\n      destination: formState.destination,\n    };\n\n    setCleanFormState({ ...formState });\n\n    // submit(data, { method: \"post\" });\n  }\n\n  return (\n    <Page>\n      <ui-title-bar title={qrCode.id ? \"Edit QR code\" : \"Create new QR code\"}>\n        <button variant=\"breadcrumb\" onClick={() => navigate(\"/app\")}>\n          QR codes\n        </button>\n      </ui-title-bar>\n      <Layout>\n        <Layout.Section>\n          <BlockStack gap=\"500\">\n            <Card>\n              <BlockStack gap=\"500\">\n                <Text as={\"h2\"} variant=\"headingLg\">\n                  Title\n                </Text>\n                <TextField\n                  id=\"title\"\n                  helpText=\"Only store staff can see this title\"\n                  label=\"title\"\n                  labelHidden\n                  autoComplete=\"off\"\n                  value={formState.title}\n                  onChange={(title) => setFormState({ ...formState, title })}\n                  error={errors.title}\n                />\n              </BlockStack>\n            </Card>\n            <Card>\n              <BlockStack gap=\"500\">\n                <InlineStack align=\"space-between\">\n                  <Text as={\"h2\"} variant=\"headingLg\">\n                    Product\n                  </Text>\n                  {formState.productId ? (\n                    <Button variant=\"plain\" onClick={selectProduct}>\n                      Change product\n                    </Button>\n                  ) : null}\n                </InlineStack>\n                {formState.productId ? (\n                  <InlineStack blockAlign=\"center\" gap=\"500\">\n                    <Thumbnail\n                      source={formState.productImage || ImageMajor}\n                      alt={formState.productAlt}\n                    />\n                    <Text as=\"span\" variant=\"headingMd\" fontWeight=\"semibold\">\n                      {formState.productTitle}\n                    </Text>\n                  </InlineStack>\n                ) : (\n                  <BlockStack gap=\"200\">\n                    <Button onClick={selectProduct} id=\"select-product\">\n                      Select product\n                    </Button>\n                    {errors.productId ? (\n                      <InlineError\n                        message={errors.productId}\n                        fieldID=\"myFieldID\"\n                      />\n                    ) : null}\n                  </BlockStack>\n                )}\n                <Bleed marginInlineStart=\"200\" marginInlineEnd=\"200\">\n                  <Divider />\n                </Bleed>\n                <InlineStack gap=\"500\" align=\"space-between\" blockAlign=\"start\">\n                  <ChoiceList\n                    title=\"Scan destination\"\n                    choices={[\n                      { label: \"Link to product page\", value: \"product\" },\n                      {\n                        label: \"Link to checkout page with product in the cart\",\n                        value: \"cart\",\n                      },\n                    ]}\n                    selected={[formState.destination]}\n                    onChange={(destination) =>\n                      setFormState({\n                        ...formState,\n                        destination: destination[0],\n                      })\n                    }\n                    error={errors.destination}\n                  />\n                  {qrCode.destinationUrl ? (\n                    <Button\n                      variant=\"plain\"\n                      url={qrCode.destinationUrl}\n                      target=\"_blank\"\n                    >\n                      Go to destination URL\n                    </Button>\n                  ) : null}\n                </InlineStack>\n              </BlockStack>\n            </Card>\n          </BlockStack>\n        </Layout.Section>\n        <Layout.Section variant=\"oneThird\">\n          <Card>\n            <Text as={\"h2\"} variant=\"headingLg\">\n              QR code\n            </Text>\n            {qrCode ? (\n              <EmptyState image={qrCode.image} imageContained={true} />\n            ) : (\n              <EmptyState image=\"\">\n                Your QR code will appear here after you save\n              </EmptyState>\n            )}\n            <BlockStack gap=\"300\">\n              <Button\n                disabled={!qrCode?.image}\n                url={qrCode?.image}\n                download\n                variant=\"primary\"\n              >\n                Download\n              </Button>\n              <Button\n                disabled={!qrCode.id}\n                url={`/qrcodes/${qrCode.id}`}\n                target=\"_blank\"\n              >\n                Go to public URL\n              </Button>\n            </BlockStack>\n          </Card>\n        </Layout.Section>\n        <Layout.Section>\n          <PageActions\n            secondaryActions={[\n              {\n                content: \"Delete\",\n                loading: isDeleting,\n                disabled: !qrCode.id || !qrCode || isSaving || isDeleting,\n                destructive: true,\n                outline: true,\n                onAction: () =>\n                  submit({ action: \"delete\" }, { method: \"post\" }),\n              },\n            ]}\n            primaryAction={{\n              content: \"Save\",\n              loading: isSaving,\n              disabled: !isDirty || isSaving || isDeleting,\n              onAction: handleSave,\n            }}\n          />\n        </Layout.Section>\n      </Layout>\n    </Page>\n  );\n}\n", "import {\n  Card,\n  Layout,\n  Link,\n  List,\n  Page,\n  Text,\n  BlockStack,\n  FormLayout,\n  TextField,\n  Form,\n  Button,\n  RangeSlider\n} from \"@shopify/polaris\";\nimport { json, redirect } from \"@remix-run/node\";\nimport {\n    useLoaderData,\n    useSubmit,\n  } from \"@remix-run/react\";\nimport {useState, useContext, useEffect} from 'react';\nimport { settingsUpdate } from \"../utils/updateFunctions\"\nimport { MyContext } from '../MyContext';\nimport { fetchSettings } from \"../models/variantShipDateData.server\";\n\n\n\nexport async function action({ request, params }){\n  const data = await request.formData();\n  let object = {};\n\n  for (var pair of data.entries()) {\n    object[`${pair[0]}`] = pair[1];      \n  }\n\n  await settingsUpdate(object);\n  \nreturn redirect(`/app/settings`);\n}\n\nexport async function loader({ request }) {\n  const settings = await fetchSettings()\n\n  return json({settings});\n}\n\nexport default function SettingsPage() {\n  console.log('settings')\n  const submit = useSubmit();\n  const loadData = useLoaderData();\n  const settings = loadData.settings[0];\n\n  const { buffer, setBuffer } = useContext(MyContext);\n  const { b2bDateAvailableMessage, setB2bDateAvailableMessage } = useContext(MyContext);\n  const { b2bDefaultShippingRange, setB2bDefaultShippingRange } = useContext(MyContext);\n  const { b2bProcessingTimeMessage, setB2bProcessingTimeMessage } = useContext(MyContext);\n  const { defaultProcessingTime, setDefaultProcessingTime } = useContext(MyContext);\n  const { dtcDateAvailableMessage, setDtcDateAvailableMessage } = useContext(MyContext);\n  const { dtcDefaultShippingRange, setDtcDefaultShippingRange } = useContext(MyContext);\n  const { dtcProcessingTimeMessage, setDtcProcessingTimeMessage } = useContext(MyContext);\n\n  useEffect(() => {\n    setBuffer(settings.buffer);\n    setB2bDateAvailableMessage(settings.b2bDateAvailableMessage);\n    setB2bDefaultShippingRange(settings.b2bDefaultShippingRange);\n    setB2bProcessingTimeMessage(settings.b2bProcessingTimeMessage);\n    setDefaultProcessingTime(settings.defaultProcessingTime);\n    setDtcDateAvailableMessage(settings.dtcDateAvailableMessage);\n    setDtcDefaultShippingRange(settings.dtcDefaultShippingRange);\n    setDtcProcessingTimeMessage(settings.dtcProcessingTimeMessage);\n  }, []);\n\n  const handleSubmit = function(){\n    let updatedSettingsObject = {};\n    updatedSettingsObject['b2bDateAvailableMessage'] = b2bDateAvailableMessage;\n    updatedSettingsObject['b2bDefaultShippingRange'] = b2bDefaultShippingRange;\n    updatedSettingsObject['b2bProcessingTimeMessage'] = b2bProcessingTimeMessage;\n    updatedSettingsObject['buffer'] = buffer;\n    updatedSettingsObject['defaultProcessingTime'] = defaultProcessingTime;\n    updatedSettingsObject['dtcDateAvailableMessage'] = dtcDateAvailableMessage;\n    updatedSettingsObject['dtcDefaultShippingRange'] = dtcDefaultShippingRange;\n    updatedSettingsObject['dtcProcessingTimeMessage'] = dtcProcessingTimeMessage;\n    updatedSettingsObject['id'] = 1;\n\n    const sortedSettings = Object.keys(settings).sort().reduce(\n      (obj, key) => { \n        obj[key] = settings[key]; \n        return obj;\n      }, \n      {}\n    );\n\n    let difference = JSON.stringify(updatedSettingsObject) !== JSON.stringify(sortedSettings) ? true : false;\n\n      // console.log('updatedSettingsObject', updatedSettingsObject)\n\n    if(difference){\n        submit(updatedSettingsObject, { method: \"post\" });\n    }\n  }\n\n  const handleRangeSliderChange = function(value, id) {\n      if(id == 'buffer'){\n        setBuffer(value);\n      } else if(id == 'default_processing_time') {\n        setDefaultProcessingTime(value)\n      } else if(id == 'dtc_default_shipping_range'){\n        setDtcDefaultShippingRange(value)\n      } else if(id == 'b2b_default_shipping_range'){\n        setB2bDefaultShippingRange(value)\n      }\n    }\n\n    const handleTextFieldChange = function(value, id) {\n      if(id == 'dtc_date_available_message'){\n        setDtcDateAvailableMessage(value);\n      } else if(id == 'dtc_processing_time_message') {\n        setDtcProcessingTimeMessage(value)\n      } else if(id == 'b2b_date_available_message'){\n        setB2bDateAvailableMessage(value)\n      } else if(id == 'b2b_processing_time_message'){\n        setB2bProcessingTimeMessage(value)\n      }\n    }\n\n \n  return (\n    <Page>\n        <h1> {buffer} </h1>\n      <ui-title-bar title=\"Settings page\" />\n      <Layout>\n        <Layout.Section>\n        <Form onSubmit={handleSubmit}>\n      <FormLayout>\n         <RangeSlider\n            label=\"Buffer days\"\n            value={buffer}\n            id=\"buffer\"\n            onChange={handleRangeSliderChange}\n            output\n            min={0}\n            max={20}\n            step={1}\n          />\n          <RangeSlider\n            label=\"Default processing time\"\n            value={defaultProcessingTime}\n            id=\"default_processing_time\"\n            onChange={handleRangeSliderChange}\n            output\n            min={0}\n            max={20}\n            step={1}\n          />\n          <RangeSlider\n            label=\"DTC default shipping range\"\n            value={dtcDefaultShippingRange}\n            id=\"dtc_default_shipping_range\"\n            onChange={handleRangeSliderChange}\n            output\n            min={0}\n            max={20}\n            step={1}\n          />\n          <RangeSlider\n            label=\"B2B default shipping range\"\n            value={b2bDefaultShippingRange}\n            id=\"b2b_default_shipping_range\"\n            onChange={handleRangeSliderChange}\n            output\n            min={0}\n            max={20}\n            step={1}\n          />\n          <TextField\n            label=\"DTC date available message\"\n            id=\"dtc_date_available_message\"\n            value={dtcDateAvailableMessage}\n            onChange={handleTextFieldChange}\n            helpText=\"Do not remove or modify '#date_available_description#'.\"\n            autoComplete=\"off\"\n          />\n           <TextField\n            label=\"DTC processing time message\"\n            id=\"dtc_processing_time_message\"\n            value={dtcProcessingTimeMessage}\n            onChange={handleTextFieldChange}\n            helpText=\"Do not remove or modify '#processing_time_description#'.\"\n            autoComplete=\"off\"\n          />\n           <TextField\n            label=\"B2B date available message\"\n            id=\"b2b_date_available_message\"\n            value={b2bDateAvailableMessage}\n            onChange={handleTextFieldChange}\n            helpText=\"Do not remove or modify '#date_available_description#'.\"\n            autoComplete=\"off\"\n          />\n           <TextField\n            label=\"B2B processing time message\"\n            id=\"b2b_processing_time_message\"\n            value={b2bProcessingTimeMessage}\n            onChange={handleTextFieldChange}\n            helpText=\"Do not remove or modify '#processing_time_description#'.\"\n            autoComplete=\"off\"\n          />\n\n        <Button submit>Save settings</Button>\n      </FormLayout>\n    </Form>\n\n        </Layout.Section>\n        <Layout.Section variant=\"oneThird\">\n          <Card>\n            <BlockStack gap=\"200\">\n              <Text as=\"h2\" variant=\"headingMd\">\n                Resources\n              </Text>\n              <List>\n                <List.Item>\n                  <Link\n                    url=\"https://shopify.dev/docs/apps/design-guidelines/navigation#app-nav\"\n                    target=\"_blank\"\n                    removeUnderline\n                  >\n                    App nav best practices\n                  </Link>\n                </List.Item>\n              </List>\n            </BlockStack>\n          </Card>\n        </Layout.Section>\n      </Layout>\n    </Page>\n  );\n}\n", "import db from \"./../db.server\";\n\n\nasync function metafieldUpdateGraphQLCall(variantId, variantShippingMessage, admin, metafieldId) {\n    const response = await admin.graphql(\n        metafieldId && metafieldId !== '' ?\n        `\n    mutation {\n        productVariantUpdate(\n        input : {\n            id: \"gid://shopify/ProductVariant/${variantId}\",\n            metafields: [\n                {\n                    id: \"${metafieldId}\"\n                    namespace: \"variant\"\n                    key: \"ship_date_string\"\n                    value: \"${variantShippingMessage}\"\n                    type: \"single_line_text_field\"\n                }\n            ]\n        }) {\n            productVariant {\n            metafields(first: 10) {\n                edges {\n                node {\n                    namespace\n                    key\n                    value\n                }\n                }\n            }\n            }\n        }\n        }\n` : `\nmutation {\n    productVariantUpdate(\n    input : {\n        id: \"gid://shopify/ProductVariant/${variantId}\",\n        metafields: [\n            {\n                namespace: \"variant\"\n                key: \"ship_date_string\"\n                value: \"${variantShippingMessage}\"\n                type: \"single_line_text_field\"\n            }\n        ]\n    }) {\n        productVariant {\n        metafields(first: 10) {\n            edges {\n            node {\n                namespace\n                key\n                value\n            }\n            }\n        }\n        }\n    }\n    }\n`);\n\n    const data = await response.json();\n    return data\n}\n\nfunction metafieldUpdateGraphQL(variantId, variantShippingMessage, admin, metafieldId){\n    return new Promise(async (resolve, reject) => {\n       const result = await metafieldUpdateGraphQLCall(variantId, variantShippingMessage, admin, metafieldId);\n       resolve(result);\n    })\n    \n}\n\nfunction individualMetafieldUpdate(arrayRow, admin, metafieldIds, updates ){\n    let variantId = Object.keys(arrayRow)[0].split('/ProductVariant/').pop();\n    let metafieldId = metafieldIds[`${Object.keys(arrayRow)[0]}`];\n    let variantShippingMessage = Object.values(arrayRow)[0];\n    updates.push(metafieldId)\n\n\n    return new Promise((resolve, reject) => {\n        metafieldUpdateGraphQL(variantId, variantShippingMessage, admin, metafieldId).then(() => {\n            resolve();\n        })\n    })\n    // const product = await metafieldUpdateGraphQL(variantId, variantShippingMessage, admin, metafieldId);\n\n    // return product\n\n}\n\nexport async function metafieldsUpdate(array, admin, metafieldIds){\n    let updates = [];\n    // const promises = array.map((arrayRow) => {\n    //     new Promise((resolve, reject) => {\n    //         individualMetafieldUpdate(arrayRow, admin, updates, metafieldIds).then(() => {\n    //             resolve();\n    //         })\n\n    //     })\n    // })\n\n    // await individualMetafieldUpdate(array[0], admin, metafieldIds, updates)\n\n\n    \n    // await Promise.all(promises).then(() => {\n    //     return updates;\n    // });\n\n    try {\n        // const results = await Promise.all(\n        //     array.map(async (arrayRow) => {\n                \n        //         let variantId = Object.keys(arrayRow)[0].split('/ProductVariant/').pop();\n        //         let metafieldId = metafieldIds[`${Object.keys(arrayRow)[0]}`];\n        //         updates.push(arrayRow)\n        //         let variantShippingMessage = Object.values(arrayRow)[0];\n        //         await metafieldUpdateGraphQL(variantId, variantShippingMessage, admin, metafieldId);\n        //     })\n        // )\n        // return results\n        let index = 0\n                    for (const arrayRow in array){\n                        if(index < 10){\n                        let variantId = Object.keys(array[`${index}`])[0].split('/ProductVariant/').pop();\n                        let metafieldId = metafieldIds[`${Object.keys(array[`${index}`])[0]}`];\n                        updates.push(array[`${index}`])\n                        let variantShippingMessage = Object.values(array[`${index}`])[0];\n                        const result = await metafieldUpdateGraphQL(variantId, variantShippingMessage, admin, metafieldId);\n                        index = index + 1;\n                    }   \n                }\n                             \n    } catch (error){\n        console.error(\"An error occurred:\", error);\n    }\n    return updates\n\n  }\n\n  export async function dbUpdate(array){\n    let currentTime = new Date();\n\n    const promises = array.map(({productVariantId, processingTime, dateAvailable, productId, productHandle, title, b2bProduct, bundleProduct, overrideMessage, shipDateMessage, updatedRecord}) => db.variantShipDateData.upsert(\n        {\n            where: {\n                productVariantId: productVariantId\n            },\n            update: {\n                processingTime: `${processingTime}`,\n                dateAvailable: `${dateAvailable}`,\n                bundleProduct: bundleProduct,\n                b2bProduct: b2bProduct,\n                updated: currentTime,\n                overrideMessage: overrideMessage,\n                shipDateMessage: shipDateMessage,\n                updatedRecord: updatedRecord\n            },\n            create: {\n                processingTime: `${processingTime}`,\n                dateAvailable: `${dateAvailable}`,\n                productVariantId: productVariantId,\n                productId: productId,\n                title: title,\n                shop: '',\n                productHandle: productHandle,\n                shipDateMessage: shipDateMessage,\n                bundleProduct: bundleProduct,\n                b2bProduct: b2bProduct,\n                overrideMessage: overrideMessage,\n                updated: currentTime,\n                updatedRecord: ''\n            }\n        }\n    ))\n\n    await Promise.all(promises);\n    return 'done'\n  }\n\n\nexport async function settingsUpdate(data){\n    const {buffer, defaultProcessingTime, dtcDateAvailableMessage, dtcProcessingTimeMessage, dtcDefaultShippingRange,b2bDefaultShippingRange,  b2bDateAvailableMessage, b2bProcessingTimeMessage} = data;\n    await db.settings.update({ \n    where: \n        { \n            id: 1 \n        }, \n    data:\n        {\n            buffer: parseInt(buffer), \n            defaultProcessingTime: parseInt(defaultProcessingTime), \n            dtcDateAvailableMessage: dtcDateAvailableMessage, \n            dtcProcessingTimeMessage: dtcProcessingTimeMessage, \n            dtcDefaultShippingRange: parseInt(dtcDefaultShippingRange),\n            b2bDefaultShippingRange: parseInt(b2bDefaultShippingRange),\n            b2bDateAvailableMessage: b2bDateAvailableMessage, \n            b2bProcessingTimeMessage: b2bProcessingTimeMessage\n        }\n    });\n  }\n\n\n  export async function dbUpdateRecord(){\n    let currentTime = new Date();\n    const user = await db.updates.create({\n            data: {\n            updated: `${currentTime}`,\n            },\n        })\n    return user\n}\n", "import { fetchUpdates } from \"../models/variantShipDateData.server\";\nimport { useLoaderData, useSubmit, useActionData } from \"@remix-run/react\";\nimport { json } from \"@remix-run/node\";\n\nimport { dbUpdateRecord } from \"../utils/updateFunctions\"\n\n\n\nexport const loader = async ({ request }) => {\n  \n    const updateData = await fetchUpdates()\n  \n    return json({ updateData});\n  };\n\nexport const action = async ({request}) => {\n\n  const updates = await dbUpdateRecord();\n  console.log('updates', updates)\n\n  return json({updates})\n}\n \n\nexport default  function Updates() {\n  const submit = useSubmit();\n\n  const handleClick = () => {\n   \n\n    submit({}, { method: \"post\" });\n\n  }\n\n    \n\n    const loadData = useLoaderData();\n    const actionData = useActionData();\n\n    console.log('actionData', actionData)\n    const { updateData } = loadData;\n    console.log('updateData', updateData)\n    return (\n        <div className=\"Updated\">Updates\n            <button onClick={handleClick}>Update</button>\n        </div>\n    )\n}\n", "import { json } from \"@remix-run/node\";\nimport invariant from \"tiny-invariant\";\nimport { useLoaderData } from \"@remix-run/react\";\n\nimport db from \"../db.server\";\nimport { getQRCodeImage } from \"~/models/QRCode.server\";\n\nexport const loader = async ({ params }) => {\n  invariant(params.id, \"Could not find QR code destination\");\n\n  const id = Number(params.id);\n  const qrCode = await db.qRCode.findFirst({ where: { id } });\n\n  invariant(qrCode, \"Could not find QR code destination\");\n\n  return json({\n    title: qrCode.title,\n    image: await getQRCodeImage(id),\n  });\n};\n\nexport default function QRCode() {\n  const { image, title } = useLoaderData();\n\n  return (\n    <>\n      <h1>{title}</h1>\n      <img src={image} alt={`QR Code for product`} />\n    </>\n  );\n}\n", "import { json, redirect } from \"@remix-run/node\";\nimport {\n    useActionData,\n    useSubmit,\n    useNavigation\n  } from \"@remix-run/react\";\nimport shopify from '~/shopify.server';\n\nimport { useState, useContext, useEffect  } from 'react'\nimport { returnDBShipDateStrings, returnMetafieldIds, formatCurrentProductData, returnVariantsToUpdateShipDateStrings, formatBulkDataOperationJSON, returnCurrentProductsArrayDifferences } from \"../utils/dataFormattingFunctions\"\nimport { returnCurrentShipDateStrings } from \"../utils/msbdFunctions\"\nimport { fetchProductsFromUrl, startBulkOperation, fetchBulkOperationData } from \"../utils/productFetchHelpers\"\nimport { metafieldsUpdate, dbUpdate } from \"../utils/updateFunctions\"\nimport { MyContext } from '../MyContext';\nimport ProductsView from '../components/ProductsView'\nimport { fetchDBShipDateData } from \"../models/variantShipDateData.server\";\nimport { ProgressBar, Page, Layout, Card, Button } from '@shopify/polaris';\n\n  export async function action({ request, params }){\n    const { admin } = await shopify.authenticate.admin(request);\n\n    const [bulkOperation] = await Promise.all([\n        startBulkOperation(admin)\n    ])\n\n    const url = await fetchBulkOperationData(bulkOperation, admin);\n    const products = await fetchProductsFromUrl(url.data.node.url)\n\n    const data = await request.formData();\n\n    let array = [];\n    let submission_type = '';\n    let settings = {};\n    let dbShipDateData = {}\n    let type = '';\n    let currentProductDataArray = []\n\n    for (var pair of data.entries()) {\n        if(JSON.parse(pair[1])['submission_type']){\n            submission_type = JSON.parse(pair[1])['submission_type'];\n        }\n        if(JSON.parse(pair[1])['settings']){\n            settings = JSON.parse(pair[1])['settings'];\n        }\n        if(JSON.parse(pair[1])['db_products']){\n          dbShipDateData = JSON.parse(pair[1])['db_products'];\n        }      \n        if(JSON.parse(pair[1])['type']){\n          type = JSON.parse(pair[1])['type'];\n        }    \n        if(!JSON.parse(pair[1])['submission_type'] && !JSON.parse(pair[1])['settings'] && !JSON.parse(pair[1])['db_products'] && !JSON.parse(pair[1])['type']){\n          currentProductDataArray.push(JSON.parse(pair[1]));\n        }\n    }\n\n    const formattedProducts = formatBulkDataOperationJSON(products);\n    let currentProductsDataAllObject = formatCurrentProductData(formattedProducts, settings);\n    let currentProductsArray = []\n    for (const [key, value] of Object.entries(currentProductsDataAllObject)) {\n      currentProductsArray.push(JSON.parse(value))\n    }\n    let dbShipDateStrings = returnDBShipDateStrings(dbShipDateData);\n    let currentShipDateStrings = returnCurrentShipDateStrings(currentProductsDataAllObject, settings);\n    let metafieldIds = returnMetafieldIds(currentProductsDataAllObject);\n    let variantsToUpdateShipDateStrings = returnVariantsToUpdateShipDateStrings(dbShipDateStrings, currentShipDateStrings)\n\n    let numberToUpdate = variantsToUpdateShipDateStrings == {} ? 0 : Object.entries(variantsToUpdateShipDateStrings).length;\n    let numberLeftToUpdate = variantsToUpdateShipDateStrings == {} || Object.entries(variantsToUpdateShipDateStrings).length - 10 < 0 ? 0 : Object.entries(variantsToUpdateShipDateStrings).length - 10;\n    \n    let currentProductsArrayDifferences = returnCurrentProductsArrayDifferences(currentProductsArray, dbShipDateData)\n    \n    if(submission_type == 'update_db'){\n        if(currentProductsArrayDifferences.length > 0){\n          await dbUpdate(currentProductsArrayDifferences);\n        }\n        const updatedDbProducts = await fetchDBShipDateData()\n\n        return json({\n          currentProductsDataAllObject, \n          currentProductsArray, \n          numberToUpdate, \n          numberLeftToUpdate, \n          submission_type, \n          updatedDbProducts,\n          type,\n          currentProductsArrayDifferences,\n          currentProductDataArray,\n          dbShipDateData\n        })\n    } else if (submission_type == 'update_metafields'){\n      \n      \n      for (const [key, value] of Object.entries(variantsToUpdateShipDateStrings)) {\n        array.push(JSON.parse(value))\n      }\n      \n      const mfUpdate = await metafieldsUpdate(array, admin, metafieldIds);\n      // const dbUpdateToken = await dbUpdate(currentProductsArray);\n\n\n      return json({formattedProducts, \n        currentProductsDataAllObject, \n        dbShipDateStrings, \n        currentShipDateStrings, \n        variantsToUpdateShipDateStrings, \n        submission_type,\n        settings,\n        array,\n        dbShipDateData,\n        mfUpdate,\n        metafieldIds,\n        // dbUpdateToken,\n        numberLeftToUpdate,\n        numberToUpdate,\n        type,\n        currentProductDataArray\n        })\n    }\n    \n  return redirect(`/app/variantshipdatedata`);\n  }\n\n    export default function Index(){        \n        const { dbProducts, setDbProducts } = useContext(MyContext);\n        const { settings, setSettings } = useContext(MyContext);\n        const { updating, setUpdating } = useContext(MyContext);\n        const { amountToUpdate, setAmountToUpdate } = useContext(MyContext);\n        const { amountLeftToUpdate, setAmountLeftToUpdate } = useContext(MyContext);\n        const { percentageUpdated, setPercentageUpdated } = useContext(MyContext);\n\n\n        const { state, formData } = useNavigation();\n\n\n        const submit = useSubmit();\n\n        const actionData = useActionData();\n\n        console.log('actionData', actionData)\n\n        useEffect(() => {\n          if(actionData !== undefined){\n            if(actionData.submission_type == \"update_db\"){\n              setDbProducts(actionData.updatedDbProducts)\n            }\n            if(actionData.numberToUpdate > 0 && actionData.numberLeftToUpdate > 0){\n              setUpdating(true);\n              let percentageUpdatedAmount = 0;\n              percentageUpdatedAmount = parseInt(100 * ((parseInt(amountToUpdate) - parseInt(actionData.numberLeftToUpdate))/parseInt(amountToUpdate)))\n              if(actionData.type == 'click'){\n                percentageUpdatedAmount = parseInt(100 * ((parseInt(actionData.numberToUpdate) - parseInt(actionData.numberLeftToUpdate))/parseInt(actionData.numberToUpdate)));\n                setAmountToUpdate(actionData.numberToUpdate);\n              }\n              setAmountLeftToUpdate(actionData.numberLeftToUpdate);\n              setPercentageUpdated(percentageUpdatedAmount);\n              if(actionData.submission_type == \"update_db\"){\n                handleUpdateMetafieldsClick();\n              } else if (actionData.submission_type == \"update_metafields\") {\n                handleUpdateDataBaseClick()\n              }\n            } else {\n              setUpdating(false);\n              setAmountToUpdate(0);\n              setAmountLeftToUpdate(0);\n              setPercentageUpdated(100);\n            }\n          }\n          \n        }, [actionData]);\n\n\n        function handleUpdateMetafieldsClick(type){\n          setUpdating(true);\n          if(type == 'click'){\n            setPercentageUpdated(0);\n          }\n          let submission = {};\n          submission['settings'] = JSON.stringify({settings: settings[0]});\n          submission['submission_type'] = JSON.stringify({submission_type: 'update_metafields'});\n          submission['db_products'] = JSON.stringify({db_products: dbProducts});\n\n          if(type == 'click'){\n            submission['type'] = JSON.stringify({type: 'click'})\n          } else {\n            submission['type'] = JSON.stringify({type: 'auto'})\n          }\n          \n\n          submit(submission, { method: \"post\" });\n        }\n\n        function handleUpdateDataBaseClick(){\n          let submission = {};\n          submission['submission_type'] = JSON.stringify({submission_type: 'update_db'});\n          submission['settings'] = JSON.stringify({settings: settings[0]});\n          submission['db_products'] = JSON.stringify({db_products: dbProducts});\n          \n          submit(submission, { method: \"post\"});\n        }\n\n    return (\n      <Page fullWidth>\n        <Layout>\n        <Layout.Section variant=\"twoThirds\">\n        <Card title=\"Products\" sectioned>\n\n            {amountLeftToUpdate > 0 && <div>{amountLeftToUpdate} / {amountToUpdate}</div>}\n            \n            {Object.keys(dbProducts).length > 0 ? (\n            <ProductsView />) : (\n              <div>Nothing here!</div>\n            )}\n            </Card>\n            </Layout.Section>\n            <Layout.Section variant=\"oneThird\">\n            <Card title=\"Actions\" sectioned>\n            <Button size=\"large\" onClick={() => handleUpdateDataBaseClick()}>Update Products Database</Button>\n            <Button size=\"large\" onClick={() => handleUpdateMetafieldsClick('click')}>Update Product Metafields</Button>\n            {updating && <div style={{width: 225}}>{percentageUpdated}%<ProgressBar progress={percentageUpdated} /></div>}\n            </Card>\n          </Layout.Section>\n          </Layout>\n    </Page>        \n    )\n}\n", "\nfunction generateShipMessage(variantData, settings){\n    let buffer = parseInt(settings.buffer);\n    let dtcProcessingTimeMessage = settings.dtcProcessingTimeMessage;\n    let dtcDateAvailableMessage = settings.dtcDateAvailableMessage;\n    let b2bProcessingTimeMessage = settings.b2bProcessingTimeMessage;\n    let b2bDateAvailableMessage = settings.b2bDateAvailableMessage;\n    let dtcDefaultShippingRange = parseInt(settings.dtcDefaultShippingRange);\n    let b2bDefaultShippingRange = parseInt(settings.b2bDefaultShippingRange);\n    let message = '';\n\n    let shippingProcessingMessage = '';\n\n      if (variantData.overrideMessage !== \"\"){\n        shippingProcessingMessage = variantData.overrideMessage;\n      } else {\n        \n        let processingTimeDifference =  parseInt(variantData.processingTime);\n        let b2b_product = variantData.b2bProduct;\n        let date = new Date(variantData.dateAvailable);\n        let bufferDays = buffer == 0 ? 0 : parseInt((((buffer)) * 7) / 5);\n\n        let hours = Math.floor(date.getTimezoneOffset() / 60);\n\n        if(hours !== 0){\n        if(hours > 0){\n            date.setDate(date.getDate() + 1);\n        }\n        }\n\n        date.setDate(date.getDate() + bufferDays);\n\n        let dateDifference = Math.ceil(parseFloat((new Date(date) - new Date()) / (1000 * 3600 * 24)));\n        let daysUntilAvailable = dateDifference > processingTimeDifference ? dateDifference : processingTimeDifference;\n        let weeksUntilAvailable = Math.round(daysUntilAvailable / 7);\n\n        if(dateDifference > processingTimeDifference){\n          let nextMonday = date;\n          const monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\n            \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\n          ];\n\n          nextMonday.setDate(nextMonday.getDate() + ((7 - nextMonday.getDay()) % 7 + 1) % 7);\n          const nth = function(d) {\n            if (d > 3 && d < 21) return `${d}th`;\n            switch (d % 10) {\n              case 1:  return `${d}st`;\n              case 2:  return `${d}nd`;\n              case 3:  return `${d}rd`;\n              default: return `${d}th`;\n            }\n          }\n\n        let dateAvailableDescription = `the week of ${monthNames[nextMonday.getMonth()]} ${nth(nextMonday.getDate())}`;\n\n          if (b2b_product){\n            message = b2bDateAvailableMessage;\n            shippingProcessingMessage = message.replace(`#date_available_description#`, dateAvailableDescription);\n          } else {\n            message = dtcDateAvailableMessage;\n            shippingProcessingMessage = message.replace(`#date_available_description#`, dateAvailableDescription);\n          }\n        } else {\n          if (b2b_product){\n            let range = b2bDefaultShippingRange;\n            let processingTimeDescription = `in ${weeksUntilAvailable > 1 && weeksUntilAvailable > range ? weeksUntilAvailable - range : 1}-${weeksUntilAvailable > 1 ? weeksUntilAvailable + range : 1 + (range * 2)} weeks`\n            message = b2bProcessingTimeMessage;\n            shippingProcessingMessage = message.replace(`#processing_time_description#`, processingTimeDescription);\n          } else {\n            let range = dtcDefaultShippingRange;\n            let processingTimeDescription = `in ${daysUntilAvailable > 1 && daysUntilAvailable > range ? daysUntilAvailable - range : 1}-${daysUntilAvailable > 1 ? daysUntilAvailable + range : 1 + (range * 2)} business days`\n            message = dtcProcessingTimeMessage;\n            shippingProcessingMessage = message.replace(`#processing_time_description#`, processingTimeDescription);\n          }\n        }\n      }  \n\n    return shippingProcessingMessage\n}\n\nexport function returnCurrentShipDateStrings(currentData, settings){\n    let currentShipDateStrings = {};\n\n    for (const [key, value] of Object.entries(currentData)) {\n        let shipMessage = generateShipMessage(JSON.parse(value), settings);\n        currentShipDateStrings[`${key}`] = shipMessage;\n      }\n\n    return currentShipDateStrings\n}\n", "import  axios  from \"axios\";\nimport { createInterface } from 'node:readline'\n\nexport async function fetchProductsFromUrl(url){\n    const response = await axios.get(`${url}`, {\n        responseType: 'stream'\n        })\n\n    const rl = createInterface({\n        input: response.data\n        })\n\n    let object = {};\n    let index = 0\n\n    for await (const line of rl) {\n        // do something with the current line\n        object[`${index}`] = JSON.parse(line);\n        index++\n        }\n\n    // const data = await response.json()\n\n    return object\n}\n\nexport async function startBulkOperation(admin){\n\n    const response = await admin.graphql(`\n    mutation {\n      bulkOperationRunQuery(\n       query: \"\"\"\n        {\n          products {\n            edges {\n              node {\n                id\n                title\n                handle\n                tags\n                variants {\n                    edges {\n                        node {\n                            id\n                            title\n                            metafields {\n                                edges {\n                                    node {\n                                        key\n                                        value\n                                        id\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n              }\n            }\n          }\n        }\n        \"\"\"\n      ) {\n        bulkOperation {\n          id\n          status\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }\n    `)\n    \n    const {\n      data: {\n        bulkOperationRunQuery: { bulkOperation },\n      },\n    } = await response.json();\n        \n    return bulkOperation\n    }\n\n    const poll = async function (fn, fnCondition, ms) {\n        let result = await fn();\n        while (fnCondition(result)) {\n          await wait(ms);\n          result = await fn();\n        }\n        return result;\n      };\n      \n      const wait = function (ms = 1000) {\n        return new Promise(resolve => {\n          setTimeout(resolve, ms);\n        });\n      };\n    \n      const validate = function(result){\n        return result.data.node.url === null;\n      }\n    \n    export async function fetchBulkOperationData(bulkOperation, admin){\n    \n        async function helper(){\n            const response = await admin.graphql(`\n            query {\n            node(id: \"${bulkOperation.id}\") {\n              ... on BulkOperation {\n                url\n                partialDataUrl\n              }\n            }\n          }\n        `);\n            let data1 = await response.json();\n    \n            return data1\n        }\n        \n        let data = await poll(helper, validate, 1000)\n        \n        return data;\n    }\n", "import { Pagination, Card,\n  ResourceList,\n  Avatar,\n  ResourceItem,\n  Text, } from \"@shopify/polaris\";\nimport { MyContext } from '../MyContext';\nimport { useState, useContext, useEffect } from 'react'\nimport { Link } from \"@remix-run/react\";\n\n\nexport default function ProductsView(){\n  const { dbProductsFormatted } = useContext(MyContext);\n\n  const [pageLimit, setPageLimit] = useState(25);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [sortValue, setSortValue] = useState('DATE_MODIFIED_DESC');\n\n  const indexOfLastPost = currentPage * pageLimit;\n  const indexOfFirstItem = indexOfLastPost - pageLimit;\n\n  const [currentItems, setCurrentItems] = useState(Object.entries(dbProductsFormatted).slice(indexOfFirstItem, indexOfLastPost));\n\n  useEffect(() => {\n    const indexOfLastPost = currentPage * pageLimit;\n    const indexOfFirstItem = indexOfLastPost - pageLimit;\n    setCurrentItems(Object.entries(dbProductsFormatted).slice(indexOfFirstItem, indexOfLastPost));\n\n  }, [currentPage]);\n\n  function onNextPage(){\n    setCurrentPage(currentPage + 1);\n  }\n\n  function onPreviousPage(){\n    setCurrentPage(currentPage - 1);\n  }\n\n\n    return (\n        <div>\n          <Pagination\n                 hasPrevious={indexOfFirstItem !== 0}\n                 onPrevious={() => {onPreviousPage()}}\n                 hasNext={(Object.entries(dbProductsFormatted).length - (pageLimit * currentPage)) > 0}\n                 onNext={() => {onNextPage()}} />\n             {currentItems.length > 0 && <ResourceList\n        resourceName={{singular: 'product', plural: 'products'}}\n        items={currentItems}\n        renderItem={(item) => {\n          const id = item[0].split('/Product/').pop()\n          const title = Object.entries(item[1])[0][1].title.split('-')[0]\n          const url = `products/${id}`\n          return (\n            <ResourceItem\n              id={id}\n              url={url}\n              accessibilityLabel={`View details for ${title}`}\n            >\n              <Text variant=\"bodyMd\" fontWeight=\"bold\" as=\"h3\">\n                {title}\n              </Text>\n            </ResourceItem>\n          );\n        }}\n        showHeader\n        totalItemsCount={dbProductsFormatted ? Object.entries(dbProductsFormatted).length : 50}\n      />}\n\n             \n\n               <Pagination\n                 hasPrevious={indexOfFirstItem !== 0}\n                 onPrevious={() => {onPreviousPage()}}\n                 hasNext={(Object.entries(dbProductsFormatted).length - (pageLimit * currentPage)) > 0}\n                 onNext={() => {onNextPage()}} />\n            </div>\n    )\n}\n", "import { useState } from \"react\";\nimport { json } from \"@remix-run/node\";\nimport {\n  AppProvider as PolarisAppProvider,\n  Button,\n  Card,\n  FormLayout,\n  Page,\n  Text,\n  TextField } from\n\"@shopify/polaris\";\nimport { Form, useActionData, useLoaderData } from \"@remix-run/react\";\nimport polarisStyles from \"@shopify/polaris/build/esm/styles.css\";\nimport { login } from \"../../shopify.server\";\nimport { loginErrorMessage } from \"./error.server\";\n\nexport const links = () => [{ rel: \"stylesheet\", href: polarisStyles }];\n\nexport const loader = async ({ request }) => {\n  const errors = loginErrorMessage(await login(request));\n\n  return json({\n    errors,\n    polarisTranslations: require(`@shopify/polaris/locales/en.json`)\n  });\n};\n\nexport const action = async ({ request }) => {\n  const errors = loginErrorMessage(await login(request));\n\n  return json({\n    errors\n  });\n};\n\nexport default function Auth() {\n  const loaderData = useLoaderData();\n  const actionData = useActionData();\n  const [shop, setShop] = useState(\"\");\n  const { errors } = actionData || loaderData;\n\n  return (\n    <PolarisAppProvider i18n={loaderData.polarisTranslations}>\n      <Page>\n        <Card>\n          <Form method=\"post\">\n            <FormLayout>\n              <Text variant=\"headingMd\" as=\"h2\">\n                Log in\n              </Text>\n              <TextField\n                type=\"text\"\n                name=\"shop\"\n                label=\"Shop domain\"\n                helpText=\"example.myshopify.com\"\n                value={shop}\n                onChange={setShop}\n                autoComplete=\"on\"\n                error={errors.shop} />\n\n              <Button submit>Log in</Button>\n            </FormLayout>\n          </Form>\n        </Card>\n      </Page>\n    </PolarisAppProvider>);\n\n}", "import { LoginErrorType } from \"@shopify/shopify-app-remix/server\";\n\nexport function loginErrorMessage(loginErrors) {\n  if (loginErrors?.shop === LoginErrorType.MissingShop) {\n    return { shop: \"Please enter your shop domain to log in\" };\n  } else if (loginErrors?.shop === LoginErrorType.InvalidShop) {\n    return { shop: \"Please enter a valid shop domain to log in\" };\n  }\n\n  return {};\n}\n", "import { authenticate } from \"../shopify.server\";\nimport db from \"../db.server\";\n\nexport const action = async ({ request }) => {\n  const { topic, shop, session, admin, payload } = await authenticate.webhook(\n    request\n  );\n\n  if (!admin) {\n    // The admin context isn't returned if the webhook fired after a shop was uninstalled.\n    throw new Response();\n  }\n\n  switch (topic) {\n    case \"APP_UNINSTALLED\":\n      if (session) {\n        await db.session.deleteMany({ where: { shop } });\n      }\n\n      break;\n    case \"CUSTOMERS_DATA_REQUEST\":\n    case \"CUSTOMERS_REDACT\":\n    case \"SHOP_REDACT\":\n    default:\n      throw new Response(\"Unhandled webhook topic\", { status: 404 });\n  }\n\n  throw new Response();\n};\n", "import { json, redirect } from \"@remix-run/node\";\nimport { Form, useLoaderData } from \"@remix-run/react\";\nimport { login } from \"../../shopify.server\";\nimport indexStyles from \"./style.css\";\n\nexport const links = () => [{ rel: \"stylesheet\", href: indexStyles }];\n\nexport const loader = async ({ request }) => {\n  const url = new URL(request.url);\n\n  if (url.searchParams.get(\"shop\")) {\n    throw redirect(`/app?${url.searchParams.toString()}`);\n  }\n\n  return json({ showForm: Boolean(login) });\n};\n\nexport default function App() {\n  const { showForm } = useLoaderData();\n\n  return (\n    <div className=\"index\">\n      <div className=\"content\">\n        <h1>A short heading about [your app]</h1>\n        <p>A tagline about [your app] that describes your value proposition.</p>\n        {showForm &&\n        <Form method=\"post\" action=\"/auth/login\">\n            <label>\n              <span>Shop domain</span>\n              <input type=\"text\" name=\"shop\" />\n              <span>e.g: my-shop-domain.myshopify.com</span>\n            </label>\n            <button type=\"submit\">Log in</button>\n          </Form>}\n\n        <ul>\n          <li>\n            <strong>Product feature</strong>. Some detail about your feature and\n            its benefit to your customer.\n          </li>\n          <li>\n            <strong>Product feature</strong>. Some detail about your feature and\n            its benefit to your customer.\n          </li>\n          <li>\n            <strong>Product feature</strong>. Some detail about your feature and\n            its benefit to your customer.\n          </li>\n        </ul>\n      </div>\n    </div>);\n\n}", "import { authenticate } from \"../shopify.server\";\n\nexport const loader = async ({ request }) => {\n  await authenticate.admin(request);\n\n  return null;\n};\n", "import { json } from \"@remix-run/node\";\nimport { Link, Outlet, useLoaderData, useRouteError } from \"@remix-run/react\";\nimport polarisStyles from \"@shopify/polaris/build/esm/styles.css\";\nimport { boundary } from \"@shopify/shopify-app-remix/server\";\nimport { AppProvider } from \"@shopify/shopify-app-remix/react\";\nimport { authenticate } from \"../shopify.server\";\nimport { MyContextProvider } from '../MyContext';\nimport { fetchDBShipDateData, fetchSettings } from \"../models/variantShipDateData.server\";\nimport { useState, useContext, useEffect } from \"react\";\nimport { MyContext } from '../MyContext';\nimport { formatDbProducts } from \"../utils/dataFormattingFunctions\";\n\n\n\nexport const links = () => [{ rel: \"stylesheet\", href: polarisStyles }];\n\n\nexport const loader = async ({ request }) => {\n  await authenticate.admin(request);\n\n  const [dataBaseProducts, settingsData] = await Promise.all([\n  fetchDBShipDateData(),\n  fetchSettings()]\n  );\n\n  return json({ apiKey: process.env.SHOPIFY_API_KEY || \"\", dataBaseProducts, settingsData });\n};\n\nexport default function App() {\n  const { setSettings } = useContext(MyContext);\n  const { setDbProducts } = useContext(MyContext);\n  const { setDbProductsFormatted } = useContext(MyContext);\n\n\n  const loadData = useLoaderData();\n  const { apiKey, dataBaseProducts, settingsData } = loadData;\n\n  console.log('dataBaseProducts', dataBaseProducts);\n\n  useEffect(() => {\n    setDbProducts(dataBaseProducts);\n    setSettings(settingsData);\n    setDbProductsFormatted(formatDbProducts(dataBaseProducts));\n  }, []);\n\n  return (\n    <AppProvider isEmbeddedApp apiKey={apiKey}>\n        <ui-nav-menu>\n          <Link to=\"/app\" rel=\"home\">\n            Home\n          </Link>\n          <Link to=\"/app/settings\">Settings</Link>\n        </ui-nav-menu>\n        <Outlet />\n    </AppProvider>);\n\n}\n\n// Shopify needs Remix to catch some thrown responses, so that their headers are included in the response.\nexport function ErrorBoundary() {\n  return boundary.error(useRouteError());\n}\n\nexport const headers = (headersArgs) => {\n  return boundary.headers(headersArgs);\n};", "export default {'entry':{'module':'/build/entry.client-5NOSUHKK.js','imports':['/build/_shared/chunk-ZWGWGGVF.js','/build/_shared/chunk-GIAAE3CH.js','/build/_shared/chunk-Y6DQSA33.js','/build/_shared/chunk-DYYXLKDN.js','/build/_shared/chunk-UWV35TSL.js','/build/_shared/chunk-XU7DNSPJ.js','/build/_shared/chunk-BOXFZXVX.js','/build/_shared/chunk-PNG5AS42.js']},'routes':{'root':{'id':'root','parentId':undefined,'path':'','index':undefined,'caseSensitive':undefined,'module':'/build/root-62AAMQL6.js','imports':['/build/_shared/chunk-KP4DVPAH.js'],'hasAction':false,'hasLoader':false,'hasErrorBoundary':false},'routes/_index':{'id':'routes/_index','parentId':'root','path':undefined,'index':true,'caseSensitive':undefined,'module':'/build/routes/_index-F63H7M7K.js','imports':['/build/_shared/chunk-3GJP5LZF.js','/build/_shared/chunk-G7CHZRZX.js'],'hasAction':false,'hasLoader':true,'hasErrorBoundary':false},'routes/app':{'id':'routes/app','parentId':'root','path':'app','index':undefined,'caseSensitive':undefined,'module':'/build/routes/app-LQJA363D.js','imports':['/build/_shared/chunk-NMZL6IDN.js','/build/_shared/chunk-MIBD2XN6.js','/build/_shared/chunk-2MOAIH4J.js','/build/_shared/chunk-SU66BP3D.js','/build/_shared/chunk-6FWHY3LN.js','/build/_shared/chunk-C3NP7DHP.js','/build/_shared/chunk-G7CHZRZX.js'],'hasAction':false,'hasLoader':true,'hasErrorBoundary':true},'routes/app._index':{'id':'routes/app._index','parentId':'routes/app','path':undefined,'index':true,'caseSensitive':undefined,'module':'/build/routes/app._index-SBW3HGLG.js','imports':['/build/_shared/chunk-KP4DVPAH.js','/build/_shared/chunk-GU2ZEMMZ.js'],'hasAction':true,'hasLoader':false,'hasErrorBoundary':false},'routes/app.product.$id.variants.$variantId':{'id':'routes/app.product.$id.variants.$variantId','parentId':'routes/app','path':'product/:id/variants/:variantId','index':undefined,'caseSensitive':undefined,'module':'/build/routes/app.product.$id.variants.$variantId-26AKKIK6.js','imports':['/build/_shared/chunk-KP4DVPAH.js'],'hasAction':false,'hasLoader':false,'hasErrorBoundary':false},'routes/app.products.$id':{'id':'routes/app.products.$id','parentId':'routes/app','path':'products/:id','index':undefined,'caseSensitive':undefined,'module':'/build/routes/app.products.$id-4TDYCT3A.js','imports':['/build/_shared/chunk-KP4DVPAH.js'],'hasAction':false,'hasLoader':false,'hasErrorBoundary':false},'routes/app.qrcodes.$id':{'id':'routes/app.qrcodes.$id','parentId':'routes/app','path':'qrcodes/:id','index':undefined,'caseSensitive':undefined,'module':'/build/routes/app.qrcodes.$id-P2CYNJ3H.js','imports':['/build/_shared/chunk-DXZPNPAJ.js'],'hasAction':true,'hasLoader':true,'hasErrorBoundary':false},'routes/app.settings':{'id':'routes/app.settings','parentId':'routes/app','path':'settings','index':undefined,'caseSensitive':undefined,'module':'/build/routes/app.settings-RWILHD7B.js','imports':['/build/_shared/chunk-KP4DVPAH.js','/build/_shared/chunk-GU2ZEMMZ.js'],'hasAction':true,'hasLoader':true,'hasErrorBoundary':false},'routes/app.updates':{'id':'routes/app.updates','parentId':'routes/app','path':'updates','index':undefined,'caseSensitive':undefined,'module':'/build/routes/app.updates-2A3LCR3L.js','imports':['/build/_shared/chunk-GU2ZEMMZ.js'],'hasAction':true,'hasLoader':true,'hasErrorBoundary':false},'routes/auth.$':{'id':'routes/auth.$','parentId':'root','path':'auth/*','index':undefined,'caseSensitive':undefined,'module':'/build/routes/auth.$-4B5WQABX.js','imports':undefined,'hasAction':false,'hasLoader':true,'hasErrorBoundary':false},'routes/auth.login':{'id':'routes/auth.login','parentId':'root','path':'auth/login','index':undefined,'caseSensitive':undefined,'module':'/build/routes/auth.login-UVPCGCPZ.js','imports':['/build/_shared/chunk-3GJP5LZF.js','/build/_shared/chunk-MIBD2XN6.js','/build/_shared/chunk-6FWHY3LN.js','/build/_shared/chunk-G7CHZRZX.js'],'hasAction':true,'hasLoader':true,'hasErrorBoundary':false},'routes/qrcodes.$id':{'id':'routes/qrcodes.$id','parentId':'root','path':'qrcodes/:id','index':undefined,'caseSensitive':undefined,'module':'/build/routes/qrcodes.$id-XPHPY7HS.js','imports':['/build/_shared/chunk-DXZPNPAJ.js','/build/_shared/chunk-G7CHZRZX.js'],'hasAction':false,'hasLoader':true,'hasErrorBoundary':false},'routes/qrcodes.$id.scan':{'id':'routes/qrcodes.$id.scan','parentId':'routes/qrcodes.$id','path':'scan','index':undefined,'caseSensitive':undefined,'module':'/build/routes/qrcodes.$id.scan-2CY3SXY7.js','imports':undefined,'hasAction':false,'hasLoader':true,'hasErrorBoundary':false},'routes/webhooks':{'id':'routes/webhooks','parentId':'root','path':'webhooks','index':undefined,'caseSensitive':undefined,'module':'/build/routes/webhooks-JFV2P4HI.js','imports':undefined,'hasAction':true,'hasLoader':false,'hasErrorBoundary':false}},'version':'36738a9e','hmr':{'runtime':'/build/_shared/chunk-DYYXLKDN.js','timestamp':1700732007751},'url':'/build/manifest-36738A9E.js'};", "\nimport * as entryServer from \"/Users/anthonygordon/Branch/branch-msbd-app/app/entry.server.jsx\";\nimport * as route0 from \"./root.jsx\";\nimport * as route1 from \"./routes/app.product.$id.variants.$variantId.jsx\";\nimport * as route2 from \"./routes/app.products.$id.jsx\";\nimport * as route3 from \"./routes/qrcodes.$id.scan.jsx\";\nimport * as route4 from \"./routes/app.qrcodes.$id.jsx\";\nimport * as route5 from \"./routes/app.settings.jsx\";\nimport * as route6 from \"./routes/app.updates.jsx\";\nimport * as route7 from \"./routes/qrcodes.$id.jsx\";\nimport * as route8 from \"./routes/app._index.jsx\";\nimport * as route9 from \"./routes/auth.login/route.jsx\";\nimport * as route10 from \"./routes/webhooks.jsx\";\nimport * as route11 from \"./routes/_index/route.jsx\";\nimport * as route12 from \"./routes/auth.$.jsx\";\nimport * as route13 from \"./routes/app.jsx\";\n  export const mode = \"development\";\n  export { default as assets } from \"@remix-run/dev/assets-manifest\";\n  export const assetsBuildDirectory = \"public/build\";\n  export const future = {\"v3_fetcherPersist\":false};\n  export const publicPath = \"/build/\";\n  export const entry = { module: entryServer };\n  export const routes = {\n    \"root\": {\n      id: \"root\",\n      parentId: undefined,\n      path: \"\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route0\n    },\n  \"routes/app.product.$id.variants.$variantId\": {\n      id: \"routes/app.product.$id.variants.$variantId\",\n      parentId: \"routes/app\",\n      path: \"product/:id/variants/:variantId\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route1\n    },\n  \"routes/app.products.$id\": {\n      id: \"routes/app.products.$id\",\n      parentId: \"routes/app\",\n      path: \"products/:id\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route2\n    },\n  \"routes/qrcodes.$id.scan\": {\n      id: \"routes/qrcodes.$id.scan\",\n      parentId: \"routes/qrcodes.$id\",\n      path: \"scan\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route3\n    },\n  \"routes/app.qrcodes.$id\": {\n      id: \"routes/app.qrcodes.$id\",\n      parentId: \"routes/app\",\n      path: \"qrcodes/:id\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route4\n    },\n  \"routes/app.settings\": {\n      id: \"routes/app.settings\",\n      parentId: \"routes/app\",\n      path: \"settings\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route5\n    },\n  \"routes/app.updates\": {\n      id: \"routes/app.updates\",\n      parentId: \"routes/app\",\n      path: \"updates\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route6\n    },\n  \"routes/qrcodes.$id\": {\n      id: \"routes/qrcodes.$id\",\n      parentId: \"root\",\n      path: \"qrcodes/:id\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route7\n    },\n  \"routes/app._index\": {\n      id: \"routes/app._index\",\n      parentId: \"routes/app\",\n      path: undefined,\n      index: true,\n      caseSensitive: undefined,\n      module: route8\n    },\n  \"routes/auth.login\": {\n      id: \"routes/auth.login\",\n      parentId: \"root\",\n      path: \"auth/login\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route9\n    },\n  \"routes/webhooks\": {\n      id: \"routes/webhooks\",\n      parentId: \"root\",\n      path: \"webhooks\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route10\n    },\n  \"routes/_index\": {\n      id: \"routes/_index\",\n      parentId: \"root\",\n      path: undefined,\n      index: true,\n      caseSensitive: undefined,\n      module: route11\n    },\n  \"routes/auth.$\": {\n      id: \"routes/auth.$\",\n      parentId: \"root\",\n      path: \"auth/*\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route12\n    },\n  \"routes/app\": {\n      id: \"routes/app\",\n      parentId: \"root\",\n      path: \"app\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route13\n    }\n  };"],
  "mappings": "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",
  "names": ["module", "prisma", "import_server", "import_node", "isbot", "import_react", "import_react", "import_jsx_dev_runtime", "import_node", "db", "import_react", "import_jsx_dev_runtime", "import_react", "key", "import_react", "import_jsx_dev_runtime", "updateRows", "import_react", "import_polaris", "import_react", "import_jsx_dev_runtime", "import_node", "import_tiny_invariant", "import_db", "import_db", "db", "qrcode", "invariant", "invariant", "db", "loader", "import_react", "import_node", "import_polaris", "import_db", "import_jsx_dev_runtime", "loader", "db", "action", "loader", "import_polaris", "import_node", "import_react", "import_db", "db", "import_jsx_dev_runtime", "action", "loader", "action", "loader", "import_react", "import_node", "import_jsx_dev_runtime", "loader", "action", "loader", "import_node", "import_tiny_invariant", "import_react", "import_db", "import_jsx_dev_runtime", "loader", "invariant", "db", "action", "import_node", "import_react", "import_react", "axios", "import_polaris", "import_react", "import_jsx_dev_runtime", "indexOfLastPost", "indexOfFirstItem", "import_polaris", "import_jsx_dev_runtime", "action", "action", "loader", "import_react", "import_node", "import_polaris", "import_server", "import_jsx_dev_runtime", "loader", "action", "PolarisAppProvider", "action", "import_db", "action", "db", "route_exports", "App", "links", "loader", "import_node", "import_react", "import_jsx_dev_runtime", "links", "loader", "App", "loader", "loader", "App", "links", "loader", "import_node", "import_react", "import_server", "import_react", "import_react", "import_jsx_dev_runtime", "links", "loader", "App", "route_exports"]
}
