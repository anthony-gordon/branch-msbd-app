{
  "version": 3,
  "sources": ["empty-module:~/shopify.server", "empty-module:../models/variantShipDateData.server", "empty-module:./../db.server", "../../../app/routes/app.variantshipdatedata.jsx", "../../../app/utils/dataFormattingFunctions.js", "../../../app/utils/msbdFunctions.js", "../../../app/utils/updateFunctions.jsx"],
  "sourcesContent": ["module.exports = {};", "module.exports = {};", "module.exports = {};", "// REMIX HMR BEGIN\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\nimport.meta.hot = __hmr__.createHotContext(\n//@ts-expect-error\n\"app/routes/app.variantshipdatedata.jsx\"\n);\nimport.meta.hot.lastModified = \"1700127868083.5283\";\n}\n// REMIX HMR END\n\nimport { json, redirect } from \"@remix-run/node\";\nimport {\n    useLoaderData,\n    useSubmit,\n  } from \"@remix-run/react\";\nimport shopify from '~/shopify.server';\n\nimport { fetchDBShipDateData } from \"../models/variantShipDateData.server\";\nimport db from \"../db.server\";\nimport { useState } from 'react'\nimport { returnDBShipDateStrings, formatCurrentProductData, returnVariantsToUpdateShipDateStrings, formatBulkDataOperationJSON } from \"../utils/dataFormattingFunctions\"\nimport { returnCurrentShipDateStrings } from \"../utils/msbdFunctions\"\nimport { metafieldsUpdate, dbUpdate } from \"../utils/updateFunctions\"\nimport  axios  from \"axios\";\nimport { createInterface } from 'node:readline'\n\n\n\nasync function startBulkOperation(admin){\n//     const response = await admin.graphql(`\n//     {\n//         collectionByHandle(handle: \"bistro\") {\n//             products(first: 3) {\n//             nodes {\n//                 variants(first: 4) {\n//                 nodes {\n//                     metafields(namespace: \"variant\", first: 4) {\n//                     nodes {\n//                         key\n//                         value\n//                     }\n//                     }\n//                     id\n//                     title\n//                 }\n//                 }\n//                 handle\n//                 id\n//                 title\n//                 tags\n//             }\n//             }\n//         }\n//     }\n// `);\n\nconst response = await admin.graphql(`\nmutation {\n  bulkOperationRunQuery(\n   query: \"\"\"\n    {\n      products {\n        edges {\n          node {\n            id\n            title\n            handle\n            tags\n            variants {\n                edges {\n                    node {\n                        id\n                        title\n                        metafields {\n                            edges {\n                                node {\n                                    key\n                                    value\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n          }\n        }\n      }\n    }\n    \"\"\"\n  ) {\n    bulkOperation {\n      id\n      status\n    }\n    userErrors {\n      field\n      message\n    }\n  }\n}\n`)\n\nconst {\n  data: {\n    bulkOperationRunQuery: { bulkOperation },\n  },\n} = await response.json();\n\nconsole.log('response', response)\n\nreturn bulkOperation\n}\n\nasync function fetchDbProducts(){\n    let dbProducts = fetchDBShipDateData();\n\n    return dbProducts\n}\n\nconst poll = async function (fn, fnCondition, ms) {\n    let result = await fn();\n    while (fnCondition(result)) {\n      await wait(ms);\n      result = await fn();\n    }\n    return result;\n  };\n  \n  const wait = function (ms = 1000) {\n    return new Promise(resolve => {\n      setTimeout(resolve, ms);\n    });\n  };\n\n  const validate = function(result){\n    return result.data.node.url === null;\n  }\n\nasync function fetchBulkOperationData(bulkOperation, admin){\n\n    async function helper(){\n        const response = await admin.graphql(`\n        query {\n        node(id: \"${bulkOperation.id}\") {\n          ... on BulkOperation {\n            url\n            partialDataUrl\n          }\n        }\n      }\n    `);\n        let data1 = await response.json();\n\n        return data1\n    }\n    \n   \n\n    let data = await poll(helper, validate, 5000)\n    \n    return data;\n}\n\n\nasync function fetchProductsFromUrl(url){\n    var cleanedUrl = url.replace(/\\n|\\r|\\s/g, '');\n\n    const response = await axios.get(`${url}`, {\n        responseType: 'stream'\n        })\n\n    const rl = createInterface({\n        input: response.data\n        })\n\n    let object = {};\n    let index = 0\n\n    for await (const line of rl) {\n        // do something with the current line\n        object[`${index}`] = JSON.parse(line);\n        index++\n        }\n\n    // const data = await response.json()\n\n    return object\n}\n\nexport async function loader({ request }) {\n    const { admin } = await shopify.authenticate.admin(request);\n\n    const [bulkOperation, dbProducts] = await Promise.all([\n        startBulkOperation(admin),\n        fetchDbProducts()\n    ])\n\n    const url = await fetchBulkOperationData(bulkOperation, admin);\n    const products = await fetchProductsFromUrl(url.data.node.url)\n\n    return json({bulkOperation, dbProducts, url, products});\n  }\n\n  \n\n  export async function action({ request, params }){\n    const { admin } = await shopify.authenticate.admin(request);\n\n    const data = await request.formData();\n\n    let array = [];\n    let submission_type = '';\n\n    for (var pair of data.entries()) {\n        if(JSON.parse(pair[1])['submission_type']){\n            submission_type = JSON.parse(pair[1])['submission_type'];\n        } else {\n            array.push(JSON.parse(pair[1]));\n        }\n    }\n\n    if(submission_type == 'update_db'){\n        await dbUpdate(array);\n    } else if (submission_type == 'update_metafields'){\n        await metafieldsUpdate(array, admin);\n    }\n    \n  return redirect(`/app/variantshipdatedata`);\n  }\n\n    export default function variantShipDataDataList(){\n        const loadData = useLoaderData();\n        // const liveShipDateData = loadData.products\n        const bulkOperationData = loadData.bulkOperation\n        const dbShipDateData = loadData.dbProducts\n        const url = loadData.url.data.node.url\n        const products = loadData.products\n        \n        const formattedProducts = formatBulkDataOperationJSON(products)\n\n        // console.log('bulkOperationData', bulkOperationData, url, products)\n\n\n        // let [currentDataList, setCurrentDataList] = useState({})\n        // let [updatedDataList, setUpdatedCurrentDataList] = useState({});\n\n        let dataBaseObjectAllProducts = formatCurrentProductData(formattedProducts);\n\n        console.log('dataBaseObjectAllProducts', dataBaseObjectAllProducts)\n\n        let dbShipDateStrings = returnDBShipDateStrings(dbShipDateData);\n        let currentShipDateStrings = returnCurrentShipDateStrings(dataBaseObjectAllProducts);\n        let variantsToUpdateShipDateStrings = returnVariantsToUpdateShipDateStrings(dbShipDateStrings, currentShipDateStrings)\n\n        const submit = useSubmit();\n\n        function handleUpdateMetafieldsClick(){\n            variantsToUpdateShipDateStrings['submission_type'] = JSON.stringify({submission_type: 'update_metafields'});\n            console.log('variantsToUpdateShipDateStrings', variantsToUpdateShipDateStrings);\n\n            let formData = new FormData();\n\n            Object.keys(variantsToUpdateShipDateStrings).forEach(key => {\n                if (typeof variantsToUpdateShipDateStrings[key] !== 'object') {\n                formData.append(key, variantsToUpdateShipDateStrings[key])\n            }\n                else {\n                    formData.append(key, JSON.stringify(variantsToUpdateShipDateStrings[key]))\n                }\n            })\n\n            let array = [];\n            let submission_type = '';\n\n            for (var pair of formData.entries()) {\n                if(JSON.parse(pair[1])['submission_type']){\n                    submission_type = JSON.parse(pair[1])['submission_type'];\n                } else {\n                    array.push(JSON.parse(pair[1]));\n                }\n            }\n\n            console.log('array', array);\n            if(array.length > 0){\n                submit(variantsToUpdateShipDateStrings, { method: \"post\" });\n            }\n        }\n\n        function handleUpdateDataBaseClick(){\n            dataBaseObjectAllProducts['submission_type'] = JSON.stringify({submission_type: 'update_db'});\n            console.log('dataBaseObjectAllProducts', dataBaseObjectAllProducts)\n            \n\n            submit(dataBaseObjectAllProducts, { method: \"post\" });\n        }\n    return (\n        <div>\n            <button onClick={() => handleUpdateDataBaseClick()}>Submit</button>\n            <button onClick={() => handleUpdateMetafieldsClick(variantsToUpdateShipDateStrings)}>Update metafields</button>\n        </div>\n        \n    )\n}\n", "// REMIX HMR BEGIN\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\nimport.meta.hot = __hmr__.createHotContext(\n//@ts-expect-error\n\"app/utils/dataFormattingFunctions.js\"\n);\nimport.meta.hot.lastModified = \"1700127688520.777\";\n}\n// REMIX HMR END\n\nexport function returnDBShipDateStrings(dbData){\n    let dbShipDateStrings = {};\n\n    dbData.forEach((dbDataRow) => {\n        dbShipDateStrings[`${dbDataRow.productVariantId}`] = dbDataRow.shipDateMessage;\n    })\n\n    return dbShipDateStrings\n  }\n\n  function updateBundleProductValues(bundleProductsArray, dataBaseObjectAllProducts){\n    bundleProductsArray.forEach((bundleProductVariantId) => {\n        let furthestData = {\n            processingTime: 0,\n            dateAvailable: '2020-01-01'\n        }\n\n        let processingTimeArray = [];\n        let dateAvailableArray = [];\n\n        let bundleProductData = JSON.parse(dataBaseObjectAllProducts[`${bundleProductVariantId}`]);\n        let bundleProductConstituentsData = JSON.parse(JSON.parse(bundleProductData.bundleProducts));\n\n        bundleProductConstituentsData.forEach((bundleProductConstituentData) => {\n            let constituentProcessingTime = JSON.parse(dataBaseObjectAllProducts[`gid://shopify/ProductVariant/${bundleProductConstituentData.variantId}`]).processingTime;\n            let constituentDateAvailable = JSON.parse(dataBaseObjectAllProducts[`gid://shopify/ProductVariant/${bundleProductConstituentData.variantId}`]).dateAvailable;\n\n            processingTimeArray.push(constituentProcessingTime);\n            dateAvailableArray.push(constituentDateAvailable);\n        })\n\n        let sortedProcessingTimeArray = [...processingTimeArray].sort(function(a, b) {\n            return a - b;\n          }).reverse();\n\n        let sortedDateAvailableArray = [...dateAvailableArray].sort(function(a, b) {\n            return new Date(a) - new Date(b);\n          }).reverse();\n\n        furthestData.processingTime = sortedProcessingTimeArray[0];\n        furthestData.dateAvailable = sortedDateAvailableArray[0];\n\n        let bundleProductVariantRowData = JSON.parse(dataBaseObjectAllProducts[`${bundleProductVariantId}`]);\n        \n        bundleProductVariantRowData.processingTime = furthestData.processingTime;\n        bundleProductVariantRowData.dateAvailable = furthestData.dateAvailable;\n\n        dataBaseObjectAllProducts[`${bundleProductVariantId}`] = JSON.stringify(bundleProductVariantRowData);\n\n    })\n  }\n\n  export function formatCurrentProductData(currentProductData){\n            let dataBaseObjectAllProducts = {};\n            let bundleProductsArray = [];\n            for (const [key, arrayRow] of Object.entries(currentProductData)) {\n                for (const [key, variant] of Object.entries(arrayRow.variants)) {\n                    console.log('variant', variant)\n                        let tags = arrayRow.tags.map(v => v.toLowerCase())\n                        let dataBaseUpdateObject = {\n                            productId: arrayRow.id,\n                            productVariantId: variant.id,\n                            title: `${arrayRow.title} - ${variant.title}`,\n                            shop: 'anthony-branch-dev-store-2022',\n                            productHandle: arrayRow.handle,\n                            shipDateMessage: '',\n                            b2bProduct: tags.includes('b2b') ? true : false,\n                            bundleProduct: tags.includes('bundle') ? true : false,\n                        };\n    \n                        dataBaseUpdateObject['processingTime'] = variant[\"processing_time\"] ? variant[\"processing_time\"] : '2';\n                        dataBaseUpdateObject['dateAvailable'] = variant[\"date_available\"] ? variant[\"date_available\"] : '2020-01-01';\n                        dataBaseUpdateObject['overrideMessage'] = variant[\"shipping\"] ? variant[\"shipping\"] : '';\n                        dataBaseUpdateObject['bundleProducts'] = variant[\"bundle_products\"] ? variant[\"bundle_products\"] : '';\n                        dataBaseUpdateObject['shipDateMessage'] = variant[\"ship_date_string\"] ? variant[\"ship_date_string\"] : '';\n                \n                        dataBaseObjectAllProducts[`${variant.id}`] = JSON.stringify(dataBaseUpdateObject);\n                    \n                }\n            }\n\n            if(bundleProductsArray.length > 0){\n                updateBundleProductValues(bundleProductsArray, dataBaseObjectAllProducts);\n            }\n    return dataBaseObjectAllProducts;\n  }\n\n  export function returnVariantsToUpdateShipDateStrings(dbShipDateStrings, currentShipDateStrings){\n    let variantsToUpdateShipDateStrings = {};\n    for (const [key, value] of Object.entries(currentShipDateStrings)) {\n        let update = true;\n        for (const [dbVariantId, dbShippingMessage] of Object.entries(dbShipDateStrings)) {\n            if(key === dbVariantId) {\n                if(value === dbShippingMessage){\n                    update = false;\n                }\n            }\n        }   \n        if(update == true){\n            let updateObject = {};\n            updateObject[`${key}`] = value;\n            variantsToUpdateShipDateStrings[`${key}`] = JSON.stringify(updateObject);\n        }\n      }\n\n    \n    return variantsToUpdateShipDateStrings\n  }\n\n  function findParentProductId(variantId, formattedProducts){\n    let id;\n\n    for (const [key, value] of Object.entries(formattedProducts)) {\n        if(value.variants && value.variants[`${variantId}`]) {\n            id = value.id;\n            break;\n        }\n    }\n\n    return id\n  }\n\n  export function formatBulkDataOperationJSON(productsObject){\n    console.log(productsObject)\n\n    let formattedProducts = {};\n\n    for (const [key, value] of Object.entries(productsObject)) {\n        if(!value[`__parentId`]){ \n                 formattedProducts[`${value.id}`] = value;\n                 formattedProducts[`${value.id}`]['variants'] = {};\n            } else if(value[`__parentId`] && value[`__parentId`].includes('/Product/')){\n                formattedProducts[`${value[`__parentId`]}`]['variants'][`${value['id']}`] = value\n            } else if(value[`__parentId`] && value[`__parentId`].includes('/ProductVariant/')) {\n                let parentProductId = findParentProductId(value[`__parentId`], formattedProducts);\n                formattedProducts[`${parentProductId}`]['variants'][`${value[\"__parentId\"]}`][`${value[\"key\"]}`] = value['value']\n            }\n          }\n\n    return formattedProducts\n  }\n", "// REMIX HMR BEGIN\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\nimport.meta.hot = __hmr__.createHotContext(\n//@ts-expect-error\n\"app/utils/msbdFunctions.js\"\n);\nimport.meta.hot.lastModified = \"1700127688521.9175\";\n}\n// REMIX HMR END\n\n\nfunction generateShipMessage(variantData){\n    let buffer = 5;\n    let dtcProcessingTimeMessage = \"Ships for free #processing_time_description#.\";\n    let dtcDateAvailableMessage = \"Ships for free #date_available_description#.\";\n    let b2bProcessingTimeMessage = \"Ships with white glove installation #processing_time_description#.\";\n    let b2bDateAvailableMessage = \"Ships with white glove installation #date_available_description#.\";\n    let dtcDefaultShippingRange = 1;\n    let b2bDefaultShippingRange = 1;\n    let message = '';\n\n    let shippingProcessingMessage = '';\n\n      if (variantData.overrideMessage !== \"\"){\n        shippingProcessingMessage = variantData.overrideMessage;\n      } else {\n        \n        let processingTimeDifference =  parseInt(variantData.processingTime);\n        let b2b_product = variantData.b2bProduct;\n        let date = new Date(variantData.dateAvailable);\n        let bufferDays = buffer == 0 ? 0 : parseInt((((buffer)) * 7) / 5);\n\n        let hours = Math.floor(date.getTimezoneOffset() / 60);\n\n        if(hours !== 0){\n        if(hours > 0){\n            date.setDate(date.getDate() + 1);\n        }\n        }\n\n        date.setDate(date.getDate() + bufferDays);\n\n        let dateDifference = Math.ceil(parseFloat((new Date(date) - new Date()) / (1000 * 3600 * 24)));\n        let daysUntilAvailable = dateDifference > processingTimeDifference ? dateDifference : processingTimeDifference;\n        let weeksUntilAvailable = Math.round(daysUntilAvailable / 7);\n\n        if(dateDifference > processingTimeDifference){\n          let nextMonday = date;\n          const monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\n            \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\n          ];\n\n          nextMonday.setDate(nextMonday.getDate() + ((7 - nextMonday.getDay()) % 7 + 1) % 7);\n          const nth = function(d) {\n            if (d > 3 && d < 21) return `${d}th`;\n            switch (d % 10) {\n              case 1:  return `${d}st`;\n              case 2:  return `${d}nd`;\n              case 3:  return `${d}rd`;\n              default: return `${d}th`;\n            }\n          }\n\n        let dateAvailableDescription = `the week of ${monthNames[nextMonday.getMonth()]} ${nth(nextMonday.getDate())}`;\n\n          if (b2b_product){\n            message = b2bDateAvailableMessage;\n            shippingProcessingMessage = message.replace(`#date_available_description#`, dateAvailableDescription);\n          } else {\n            message = dtcDateAvailableMessage;\n            shippingProcessingMessage = message.replace(`#date_available_description#`, dateAvailableDescription);\n          }\n        } else {\n          if (b2b_product){\n            let range = b2bDefaultShippingRange;\n            let processingTimeDescription = `in ${weeksUntilAvailable > 1 && weeksUntilAvailable > range ? weeksUntilAvailable - range : 1}-${weeksUntilAvailable > 1 ? weeksUntilAvailable + range : 1 + (range * 2)} weeks`\n            message = b2bProcessingTimeMessage;\n            shippingProcessingMessage = message.replace(`#processing_time_description#`, processingTimeDescription);\n          } else {\n            let range = dtcDefaultShippingRange;\n            let processingTimeDescription = `in ${daysUntilAvailable > 1 && daysUntilAvailable > range ? daysUntilAvailable - range : 1}-${daysUntilAvailable > 1 ? daysUntilAvailable + range : 1 + (range * 2)} business days`\n            message = dtcProcessingTimeMessage;\n            shippingProcessingMessage = message.replace(`#processing_time_description#`, processingTimeDescription);\n          }\n        }\n      }  \n\n    return shippingProcessingMessage\n}\n\nexport function returnCurrentShipDateStrings(currentData){\n    let currentShipDateStrings = {};\n\n    for (const [key, value] of Object.entries(currentData)) {\n        let shipMessage = generateShipMessage(JSON.parse(value));\n        currentShipDateStrings[`${key}`] = shipMessage;\n      }\n\n    return currentShipDateStrings\n}\n", "// REMIX HMR BEGIN\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\nimport.meta.hot = __hmr__.createHotContext(\n//@ts-expect-error\n\"app/utils/updateFunctions.jsx\"\n);\nimport.meta.hot.lastModified = \"1700127688522.874\";\n}\n// REMIX HMR END\n\nimport db from \"./../db.server\";\n\nasync function metafieldUpdateGraphQL(variantId, variantShippingMessage, admin){\n    const response = await admin.graphql(`\n    mutation {\n        productVariantUpdate(\n        input : {\n            id: \"gid://shopify/ProductVariant/${variantId}\",\n            metafields: [\n                {\n                    namespace: \"variant\"\n                    key: \"ship_date_string\"\n                    value: \"${variantShippingMessage}\"\n                    type: \"single_line_text_field\"\n                }\n            ]\n        }) {\n            productVariant {\n            metafields(first: 10) {\n                edges {\n                node {\n                    namespace\n                    key\n                    value\n                }\n                }\n            }\n            }\n        }\n        }\n`);\n\nconst {\ndata: {\n    productVariantUpdate: { product },\n},\n} = await response.json();\nreturn product\n}\n\nexport async function metafieldsUpdate(array, admin){\n    let updates = [];\n    const promises = array.map((arrayRow) => {\n        let variantId = Object.keys(arrayRow)[0].split('/ProductVariant/').pop();\n        let variantShippingMessage = Object.values(arrayRow)[0];\n        let product = metafieldUpdateGraphQL(variantId, variantShippingMessage, admin)\n        updates.push(product)\n    })\n\n    \n    await Promise.all(promises);\n    return updates;\n  }\n\n  export async function dbUpdate(array){\n    let currentTime = new Date();\n\n    const promises = array.map(({productVariantId, processingTime, dateAvailable, productId, productHandle, title, b2bProduct, bundleProduct, overrideMessage, shipDateMessage}) => db.variantShipDateData.upsert(\n        {\n            where: {\n                productVariantId: productVariantId\n            },\n            update: {\n                processingTime: `${processingTime}`,\n                dateAvailable: dateAvailable,\n                shipDateMessage: '',\n                bundleProduct: bundleProduct,\n                b2bProduct: b2bProduct,\n                updated: currentTime,\n                overrideMessage: overrideMessage,\n                shipDateMessage: shipDateMessage\n            },\n            create: {\n                processingTime: `${processingTime}`,\n                dateAvailable: `${dateAvailable}`,\n                productVariantId: productVariantId,\n                productId: productId,\n                title: title,\n                shop: '',\n                productHandle: productHandle,\n                shipDateMessage: shipDateMessage,\n                bundleProduct: bundleProduct,\n                b2bProduct: b2bProduct,\n                overrideMessage: overrideMessage,\n                updated: currentTime\n            }\n        }\n    ))\n\n    await Promise.all(promises);\n  }\n"],
  "mappings": "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",
  "names": ["key"]
}
